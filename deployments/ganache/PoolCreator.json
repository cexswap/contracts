{
  "address": "0xFdB402FfcffC48F9E9fdD73B8e0e024cF0Fc11fb",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token1",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "token2",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "poolOwner",
          "type": "address"
        }
      ],
      "name": "deploy",
      "outputs": [
        {
          "internalType": "contract Swap",
          "name": "pool",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc8b7bbfe436a73b6d33eda4c22872ccf23803d8b5a297d3985a54ee17a62c197",
  "receipt": {
    "to": null,
    "from": "0x5026AD2356D97d2F3cA66aa4b5F087f67164C654",
    "contractAddress": "0xFdB402FfcffC48F9E9fdD73B8e0e024cF0Fc11fb",
    "transactionIndex": 0,
    "gasUsed": "5057176",
    "logsBloom": "0x
    "blockHash": "0xbdddadd7a7b314f5daa631994065c3d1c4bd778e12e443ef21c1e19200af00ff",
    "transactionHash": "0xc8b7bbfe436a73b6d33eda4c22872ccf23803d8b5a297d3985a54ee17a62c197",
    "logs": [],
    "blockNumber": 64,
    "cumulativeGasUsed": "5057176",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "9c17c5f61ed871b63a1cfd15c62c1de1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token2\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"poolOwner\",\"type\":\"address\"}],\"name\":\"deploy\",\"outputs\":[{\"internalType\":\"contract Swap\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Helper contract to deploy pools \",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PoolCreator.sol\":\"PoolCreator\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xe0c8b625a79bac0fe80f17cfb521e072805cc9cef1c96a5caf45b264e74812fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xc995bddbca1ae19788db9f8b61e63385edd3fddf89693b612d5abd1a275974d2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/PoolCreator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"./Swap.sol\\\";\\r\\n\\r\\n/** Helper contract to deploy pools */\\r\\ncontract PoolCreator {\\r\\n  \\r\\n  function deploy(\\r\\n    IERC20 token1,\\r\\n    IERC20 token2,\\r\\n    string calldata name,\\r\\n    string calldata symbol,\\r\\n    address poolOwner\\r\\n  ) external returns(Swap pool)\\r\\n  {\\r\\n    pool = new Swap(token1, token2, name, symbol, IGovernanceFactory(msg.sender));\\r\\n    pool.transferOwnership(poolOwner);\\r\\n  } \\r\\n}\",\"keccak256\":\"0x3830c78de28bcdda276e4ca0fdc32e1d52f4a6dfbe555cf7ee737e9b010828ab\",\"license\":\"MIT\"},\"contracts/Swap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"./interfaces/IFeeCollector.sol\\\";\\r\\nimport \\\"./lib/ERC20Helper.sol\\\";\\r\\nimport \\\"./lib/SQRT.sol\\\";\\r\\nimport \\\"./lib/VirtualBalance.sol\\\";\\r\\nimport \\\"./governance/Governance.sol\\\";\\r\\n\\r\\ncontract Swap is Governance {\\r\\n  using SQRT for uint256;\\r\\n  using SafeMath for uint256;\\r\\n  using ERC20Helper for IERC20;\\r\\n  using VirtualBalance for VirtualBalance.Data;\\r\\n\\r\\n  struct Balances {\\r\\n    uint256 src;\\r\\n    uint256 dst;\\r\\n  }\\r\\n\\r\\n  struct Volumes {\\r\\n    uint128 confirmed;\\r\\n    uint128 result;\\r\\n  }\\r\\n  \\r\\n  struct Fees {\\r\\n    uint256 fee;\\r\\n    uint256 slippageFee;\\r\\n  }\\r\\n\\r\\n  event Error(string reason);\\r\\n\\r\\n  event Deposited(\\r\\n    address indexed sender,\\r\\n    address indexed receiver,\\r\\n    uint256 share,\\r\\n    uint256 token0Amount,\\r\\n    uint256 token1Amount\\r\\n  );\\r\\n\\r\\n  event Withdrawn(\\r\\n    address indexed sender,\\r\\n    address indexed receiver,\\r\\n    uint256 share,\\r\\n    uint256 token0Amount,\\r\\n    uint256 token1Amount\\r\\n  );\\r\\n\\r\\n  event Swapped(\\r\\n    address indexed sender,\\r\\n    address indexed receiver,\\r\\n    address indexed srcToken,\\r\\n    address dstToken,\\r\\n    uint256 amount,\\r\\n    uint256 result,\\r\\n    uint256 srcBalanceAdded,\\r\\n    uint256 dstBalanceRemoved,\\r\\n    address referral\\r\\n  );\\r\\n\\r\\n  event Sync(\\r\\n    uint256 srcBalance,\\r\\n    uint256 dstBalance,\\r\\n    uint256 fee,\\r\\n    uint256 slippageFee,\\r\\n    uint256 referralShare,\\r\\n    uint256 governanceShare\\r\\n  );\\r\\n\\r\\n  uint256 private constant _BASE_SUPPLY = 1000; // Total supply on first deposit\\r\\n\\r\\n  IERC20 public immutable token0;\\r\\n  IERC20 public immutable token1;\\r\\n  mapping(IERC20 => Volumes) public volumes;\\r\\n  mapping(IERC20 => VirtualBalance.Data) public virtualBalanceToAdd;\\r\\n  mapping(IERC20 => VirtualBalance.Data) public virtualBalanceToRemove;\\r\\n\\r\\n  modifier whenNotShutdown {\\r\\n    require(governanceFactory.isActive(), \\\"SWAP_FACTORY_SHUTDOWN\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  constructor(\\r\\n    IERC20 _token0,\\r\\n    IERC20 _token1,\\r\\n    string memory name,\\r\\n    string memory symbol,\\r\\n    IGovernanceFactory _governanceFactory\\r\\n  ) \\r\\n    ERC20(name, symbol)\\r\\n    Governance(_governanceFactory)\\r\\n  {\\r\\n    require(bytes(name).length > 0, \\\"SWAP_NAME_EMPTY\\\");\\r\\n    require(bytes(symbol).length > 0, \\\"SWAP_SYMBOL_EMPTY\\\");\\r\\n    require(_token0 != _token1, \\\"SWAP_TWO_TOKENS_SAME\\\");\\r\\n    token0 = _token0;\\r\\n    token1 = _token1;\\r\\n  }\\r\\n\\r\\n  /** Returns pair of tokens as [token0, token1] */\\r\\n  function getTokens()\\r\\n    external\\r\\n    view\\r\\n    returns(IERC20[] memory tokens)\\r\\n  {\\r\\n    tokens = new IERC20[](2);\\r\\n    tokens[0] = token0;\\r\\n    tokens[1] = token1;\\r\\n  }\\r\\n\\r\\n  function getToken(uint256 position)\\r\\n    external\\r\\n    view\\r\\n    returns(IERC20)\\r\\n  {\\r\\n    if(position == 0 ) {\\r\\n      return token0;\\r\\n    } else if(position == 1){\\r\\n      return token1;\\r\\n    } else {\\r\\n      revert(\\\"SWAP_HAVE_ONLY_TWO_TOKENS\\\");\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function getBalanceToAdd(IERC20 token)\\r\\n    public\\r\\n    view\\r\\n    returns(uint256)\\r\\n  {\\r\\n    uint256 balance = token.getBalanceOf(address(this));\\r\\n    return Math.max(virtualBalanceToAdd[token].current(getDecayPeriod(), balance), balance);\\r\\n  }\\r\\n\\r\\n  function getBalanceToRemove(IERC20 token)\\r\\n    public\\r\\n    view\\r\\n    returns(uint256)\\r\\n  {\\r\\n    uint256 balance = token.getBalanceOf(address(this));\\r\\n    return Math.min(virtualBalanceToRemove[token].current(getDecayPeriod(), balance), balance);\\r\\n  }\\r\\n\\r\\n  /** Returns how many `dst` tokens will be returned for `amount` of `src` tokens */\\r\\n  function getQuote(IERC20 src, IERC20 dst, uint256 amount)\\r\\n    external\\r\\n    view\\r\\n    returns(uint256)\\r\\n  {\\r\\n    return _getQuote(src, dst, amount, getBalanceToAdd(src), getBalanceToRemove(dst), getFee(), getSlippageFee());\\r\\n  }\\r\\n\\r\\n  function deposit(uint256[2] memory maxAmounts, uint256[2] memory minAmounts)\\r\\n    external\\r\\n    payable\\r\\n    returns(uint256 fairSupply, uint256[2] memory receivedAmounts)\\r\\n  {\\r\\n    return depositFor(maxAmounts, minAmounts, msg.sender);\\r\\n  }\\r\\n\\r\\n  function depositFor(uint256[2] memory maxAmounts, uint256[2] memory minAmounts, address target)\\r\\n    public\\r\\n    payable\\r\\n    nonReentrant\\r\\n    returns(uint256 fairSupply, uint256[2] memory receivedAmounts)\\r\\n  {\\r\\n    IERC20[2] memory _tokens = [token0, token1];\\r\\n    require(\\r\\n      msg.value == (_tokens[0].isNativeToken() ? maxAmounts[0] : (_tokens[1].isNativeToken() ? maxAmounts[1] : 0)), \\r\\n      \\\"SWAP_DEPOSIT_WRONG_MSG_VALUE\\\"\\r\\n    );\\r\\n    uint256 totalSupply = totalSupply();\\r\\n    if(totalSupply == 0) {\\r\\n      fairSupply = _BASE_SUPPLY.mul(99);\\r\\n      _mint(address(this), _BASE_SUPPLY); // Donate up to 1%\\r\\n\\r\\n      for(uint i = 0; i < maxAmounts.length; i++) {\\r\\n        fairSupply = Math.max(fairSupply, maxAmounts[i]);\\r\\n        require(maxAmounts[i] > 0, \\\"SWAP_DEPOSIT_AMOUNT_IS_ZERO_0\\\");\\r\\n        require(maxAmounts[i] >= minAmounts[i], \\\"SWAP_DEPOSIT_MIN_AMOUNT_LOW_0\\\");\\r\\n        _tokens[i].customTransferFrom(payable(msg.sender), address(this), maxAmounts[i]);\\r\\n        receivedAmounts[i] = maxAmounts[i];\\r\\n      }\\r\\n    } else {\\r\\n      uint256[2] memory realBalances;\\r\\n      for(uint i = 0; i < realBalances.length; i++) {\\r\\n        realBalances[i] = _tokens[i].getBalanceOf(address(this)).sub(_tokens[i].isNativeToken() ? msg.value : 0);\\r\\n      }\\r\\n\\r\\n      fairSupply = type(uint256).max;\\r\\n      for(uint i = 0; i < maxAmounts.length; i++) {\\r\\n        fairSupply = Math.min(fairSupply, totalSupply.mul(maxAmounts[i]).div(realBalances[i]));\\r\\n      }\\r\\n      \\r\\n      uint256 fairSupplyCached = fairSupply; \\r\\n      for(uint i = 0; i < maxAmounts.length; i++) {\\r\\n        require(maxAmounts[i] > 0, \\\"SWAP_DEPOSIT_AMOUNT_IS_ZERO_1\\\");\\r\\n        uint256 amount = realBalances[i].mul(fairSupplyCached).add(totalSupply - 1).div(totalSupply);\\r\\n        require(amount >= minAmounts[i], \\\"SWAP_DEPOSIT_MIN_AMOUNT_LOW_1\\\");\\r\\n        _tokens[i].customTransferFrom(payable(msg.sender), address(this), amount);\\r\\n        receivedAmounts[i] = _tokens[i].getBalanceOf(address(this)).sub(realBalances[i]);\\r\\n        fairSupply = Math.min(fairSupply, totalSupply.mul(receivedAmounts[i]).div(realBalances[i]));\\r\\n      }\\r\\n      \\r\\n      uint256 _decayPeriod = getDecayPeriod(); // gas saving\\r\\n      for(uint i = 0; i < maxAmounts.length; i++) {\\r\\n        virtualBalanceToRemove[_tokens[i]].scale(_decayPeriod, realBalances[i], totalSupply.add(fairSupply), totalSupply);\\r\\n        virtualBalanceToAdd[_tokens[i]].scale(_decayPeriod, realBalances[i], totalSupply.add(fairSupply), totalSupply);\\r\\n      }\\r\\n      \\r\\n    }\\r\\n\\r\\n    require(fairSupply > 0, \\\"SWAP_DEPOSIT_RESULT_NOT_ENOUGH\\\");\\r\\n    _mint(target, fairSupply);\\r\\n\\r\\n    emit Deposited(msg.sender, target, fairSupply, receivedAmounts[0], receivedAmounts[1]);\\r\\n  }\\r\\n\\r\\n  function withdraw(uint256 amount, uint256[] memory minReturns)\\r\\n    external\\r\\n    returns(uint256[2] memory withdrawnAmounts)\\r\\n  {\\r\\n    return withdrawFor(amount, minReturns, payable(msg.sender));\\r\\n  }\\r\\n\\r\\n  /** Withdraws funds from the liquidity pool */\\r\\n  function withdrawFor(uint256 amount, uint256[] memory minReturns, address payable target)\\r\\n    public\\r\\n    nonReentrant\\r\\n    returns(uint256[2] memory withdrawnAmounts)\\r\\n  {\\r\\n    IERC20[2] memory _tokens = [token0, token1];\\r\\n    uint256 totalSupply = totalSupply();\\r\\n    uint256 _decayPeriod = getDecayPeriod(); // gas saving\\r\\n    _burn(msg.sender, amount);\\r\\n\\r\\n    for(uint i = 0; i < _tokens.length; i++) {\\r\\n      IERC20 token = _tokens[i];\\r\\n      uint256 preBalance = token.getBalanceOf(address(this));\\r\\n      uint256 value = preBalance.mul(amount).div(totalSupply);\\r\\n      token.customTransfer(target, value);\\r\\n      withdrawnAmounts[i] = value;\\r\\n      require(i >= minReturns.length || value >= minReturns[i], \\\"SWAP_WITHDRAW_RESULT_NOT_ENOUGH\\\");\\r\\n      virtualBalanceToRemove[token].scale(_decayPeriod, preBalance, totalSupply.add(amount), totalSupply);\\r\\n      virtualBalanceToAdd[token].scale(_decayPeriod, preBalance, totalSupply.add(amount), totalSupply);\\r\\n    }\\r\\n\\r\\n    emit Withdrawn(msg.sender, target, amount, withdrawnAmounts[0], withdrawnAmounts[1]);\\r\\n  }\\r\\n\\r\\n  function swap(IERC20 src, IERC20 dst, uint256 amount, uint256 minReturn, address referral)\\r\\n    external\\r\\n    payable\\r\\n    returns(uint256 result)\\r\\n  {\\r\\n    return swapFor(src, dst, amount, minReturn, referral, payable(msg.sender));\\r\\n  }\\r\\n\\r\\n  function swapFor(IERC20 src, IERC20 dst, uint256 amount, uint256 minReturn, address referral, address payable receiver)\\r\\n    public\\r\\n    payable\\r\\n    nonReentrant\\r\\n    whenNotShutdown\\r\\n    returns(uint256 result)\\r\\n  {\\r\\n    require(msg.value == (src.isNativeToken() ? amount : 0), \\\"SWAP_WRONG_MSG_VALUE\\\");\\r\\n    Balances memory balances = Balances({\\r\\n      src: src.getBalanceOf(address(this)).sub(src.isNativeToken() ? msg.value : 0),\\r\\n      dst: dst.getBalanceOf(address(this))\\r\\n    });\\r\\n\\r\\n    uint256 confirmed;\\r\\n    Balances memory virtualBalances;\\r\\n    Fees memory fees = Fees({\\r\\n      fee: getFee(),\\r\\n      slippageFee: getSlippageFee()\\r\\n    });\\r\\n\\r\\n    (confirmed, result, virtualBalances) = _doTransfers(src, dst, amount, minReturn, receiver, balances, fees);\\r\\n    emit Swapped(\\r\\n      msg.sender, \\r\\n      receiver, \\r\\n      address(src), \\r\\n      address(dst), \\r\\n      confirmed, \\r\\n      result, \\r\\n      virtualBalances.src, \\r\\n      virtualBalances.dst, \\r\\n      referral\\r\\n    );\\r\\n    \\r\\n    _mintRewards(confirmed, result, referral, balances, fees);\\r\\n\\r\\n    // Overflow of uint128 is desired\\r\\n    volumes[src].confirmed += uint128(confirmed);\\r\\n    volumes[src].result += uint128(result);\\r\\n  }\\r\\n\\r\\n  function _doTransfers(\\r\\n    IERC20 src, \\r\\n    IERC20 dst, \\r\\n    uint256 amount, \\r\\n    uint256 minReturn, \\r\\n    address payable receiver,\\r\\n    Balances memory balances,\\r\\n    Fees memory fees\\r\\n  )\\r\\n    private\\r\\n    returns(uint256 confirmed, uint256 result, Balances memory virtualBalances)\\r\\n  {\\r\\n    uint256 _decayPeriod = getDecayPeriod();\\r\\n    virtualBalances.src = virtualBalanceToAdd[src].current(_decayPeriod, balances.src);\\r\\n    virtualBalances.src = Math.max(virtualBalances.src, balances.src);\\r\\n    virtualBalances.dst = virtualBalanceToRemove[dst].current(_decayPeriod, balances.dst);\\r\\n    virtualBalances.dst = Math.min(virtualBalances.dst, balances.dst);\\r\\n    src.customTransferFrom(payable(msg.sender), address(this), amount);\\r\\n    confirmed = src.getBalanceOf(address(this)).sub(balances.src);\\r\\n    result = _getQuote(\\r\\n      src, \\r\\n      dst, \\r\\n      confirmed, \\r\\n      virtualBalances.src, \\r\\n      virtualBalances.dst, \\r\\n      fees.fee, \\r\\n      fees.slippageFee\\r\\n    );\\r\\n    require(result > 0 && result >= minReturn, \\\"SWAP_RESULT_NOT_ENOUGH\\\");\\r\\n    dst.customTransfer(receiver, result);\\r\\n\\r\\n    // Update virtual balances to the same direction only at imbalanced state\\r\\n    if(virtualBalances.src != balances.src) {\\r\\n      virtualBalanceToAdd[src].set(virtualBalances.src.add(confirmed));\\r\\n    }\\r\\n\\r\\n    if(virtualBalances.dst != balances.dst) {\\r\\n      virtualBalanceToRemove[dst].set(virtualBalances.dst.sub(result));\\r\\n    }\\r\\n\\r\\n    // Update virtual balances to the opposite direction\\r\\n    virtualBalanceToRemove[src].update(_decayPeriod, balances.src);\\r\\n    virtualBalanceToAdd[dst].update(_decayPeriod, balances.dst);\\r\\n  }\\r\\n\\r\\n  function _mintRewards(\\r\\n    uint256 confirmed, \\r\\n    uint256 result, \\r\\n    address referral, \\r\\n    Balances memory balances, \\r\\n    Fees memory fees\\r\\n  ) private \\r\\n  {\\r\\n    (\\r\\n      uint256 referralShare, \\r\\n      uint256 governanceShare, \\r\\n      address governanceWallet, \\r\\n      address feeCollector\\r\\n    ) = governanceFactory.getShareParameters(); \\r\\n\\r\\n    uint256 referralReward;\\r\\n    uint256 governanceReward;\\r\\n\\r\\n    uint256 invariantRatio = uint256(1e36);\\r\\n    invariantRatio = invariantRatio.mul(balances.src.add(confirmed)).div(balances.src);\\r\\n    invariantRatio = invariantRatio.mul(balances.dst.sub(result)).div(balances.dst);\\r\\n    if(invariantRatio > 1e36){\\r\\n      // calculate share only if invariant increased\\r\\n      invariantRatio = invariantRatio.sqrt();\\r\\n      uint256 invariantIncrease = totalSupply().mul(invariantRatio.sub(1e18)).div(invariantRatio);\\r\\n      \\r\\n      referralReward = (referral != address(0)) ? \\r\\n                        invariantIncrease.mul(referralShare).div(SwapConstants._FEE_DENOMINATOR) \\r\\n                        : 0;\\r\\n      \\r\\n      governanceReward = (governanceWallet != address(0)) ? \\r\\n                        invariantIncrease.mul(governanceShare).div(SwapConstants._FEE_DENOMINATOR) \\r\\n                        : 0;\\r\\n      \\r\\n      if(feeCollector == address(0)) {\\r\\n        if(referralReward > 0) {\\r\\n          _mint(referral, referralReward);\\r\\n        }\\r\\n\\r\\n        if(governanceReward > 0) {\\r\\n          _mint(governanceWallet, governanceReward);\\r\\n        }\\r\\n      } else if(referralReward > 0 || governanceReward > 0) {\\r\\n        uint256 length = (referralReward > 0 ? 1 : 0) + (governanceReward > 0 ? 1 : 0);\\r\\n        address[] memory wallets = new address[](length);\\r\\n        uint256[] memory rewards = new uint256[](length);\\r\\n\\r\\n        wallets[0] = referral;\\r\\n        rewards[0] = referralReward;\\r\\n        if(governanceReward > 0) {\\r\\n          wallets[length - 1] = governanceWallet;\\r\\n          rewards[length - 1] = governanceReward;\\r\\n        }\\r\\n\\r\\n        try IFeeCollector(feeCollector).updateRewards(wallets, rewards) {\\r\\n          _mint(feeCollector, referralReward.add(governanceReward));\\r\\n        } catch {\\r\\n          emit Error(\\\"Update Rewards Failed\\\");\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n\\r\\n    emit Sync(balances.src, balances.dst, fees.fee, fees.slippageFee, referralReward, governanceReward);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    spot_ret = dx * y / x\\r\\n    uni_ret = dx * y / (x + dx)\\r\\n    slippage = (spot_ret - uni_ret) / spot_ret\\r\\n    slippage = dx * dx * y / (x * (x + dx)) / (dx * y / x)\\r\\n    slippage = dx / (x + dx)\\r\\n    ret = uni_ret * (1 - slip_fee * slippage)\\r\\n    ret = dx * y / (x + dx) * (1 - slip_fee * dx / (x + dx))\\r\\n    ret = dx * y / (x + dx) * (x + dx - slip_fee * dx) / (x + dx)\\r\\n\\r\\n    x = amount * denominator\\r\\n    dx = amount * (denominator - fee)\\r\\n   */\\r\\n  function _getQuote(\\r\\n    IERC20 src, \\r\\n    IERC20 dst,\\r\\n    uint256 amount,\\r\\n    uint256 srcBalance,\\r\\n    uint256 dstBalance,\\r\\n    uint256 fee,\\r\\n    uint256 slippageFee\\r\\n  )\\r\\n    internal\\r\\n    view\\r\\n    returns(uint256)\\r\\n  {\\r\\n    if(src > dst){\\r\\n      (src, dst) = (dst, src);\\r\\n    }\\r\\n\\r\\n    if(amount > 0 && src == token0 && dst == token1) {\\r\\n      uint256 taxedAmount = amount.sub(amount.mul(fee).div(SwapConstants._FEE_DENOMINATOR));\\r\\n      uint256 srcBalancePlusTaxedAmount = srcBalance.add(taxedAmount);\\r\\n      uint256 ret = taxedAmount.mul(dstBalance).div(srcBalancePlusTaxedAmount);\\r\\n      uint256 feeNumerator = SwapConstants._FEE_DENOMINATOR.mul(srcBalancePlusTaxedAmount).sub(slippageFee.mul(taxedAmount));\\r\\n      uint256 feeDenominator = SwapConstants._FEE_DENOMINATOR.mul(srcBalancePlusTaxedAmount);\\r\\n\\r\\n      return ret.mul(feeNumerator).div(feeDenominator);\\r\\n    }\\r\\n\\r\\n    return 0;\\r\\n  }\\r\\n\\r\\n  /** Allows contract owner to withdraw funds that was send to contract by mistake */\\r\\n  function rescueFunds(IERC20 token, uint256 amount)\\r\\n    external\\r\\n    nonReentrant\\r\\n    onlyOwner\\r\\n  {\\r\\n    uint256 balance0 = token0.getBalanceOf(address(this));\\r\\n    uint256 balance1 = token1.getBalanceOf(address(this));\\r\\n\\r\\n    token.customTransfer(payable(msg.sender), amount);\\r\\n    require(token0.getBalanceOf(address(this)) >= balance0, \\\"SWAP_RESCUE_DENIED_BAL_0\\\");\\r\\n    require(token1.getBalanceOf(address(this)) >= balance1, \\\"SWAP_RESCUE_DENIED_BAL_1\\\");\\r\\n    require(balanceOf(address(this)) >= _BASE_SUPPLY, \\\"SWAP_RESCUE_DENIED_BASE_SUPPLY\\\");\\r\\n  }\\r\\n}\",\"keccak256\":\"0x15229bb2624b34b8075323d39449fd4cc227da507b8c3365a3c6466ce616f631\",\"license\":\"MIT\"},\"contracts/governance/Governance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"../interfaces/IGovernanceFactory.sol\\\";\\r\\nimport \\\"../lib/PoolVoting.sol\\\";\\r\\nimport \\\"../lib/SwapConstants.sol\\\";\\r\\nimport \\\"../lib/SafeCast.sol\\\";\\r\\n\\r\\n/*\\r\\n* Swap governance\\r\\n*/\\r\\nabstract contract Governance is ERC20, Ownable, ReentrancyGuard {\\r\\n  using Vote for Vote.Data;\\r\\n  using PoolVoting for PoolVoting.Data;\\r\\n  using VirtualVote for VirtualVote.Data;\\r\\n  using SafeCast for uint256;\\r\\n  using SafeMath for uint256;\\r\\n\\r\\n  event FeeVoteUpdated(address indexed user, uint256 fee, bool isDefault, uint256 amount);\\r\\n  event SlippageFeeVoteUpdated(address indexed user, uint256 slippageFee, bool isDefault, uint256 amount);\\r\\n  event DecayPeriodUpdated(address indexed user, uint256 decayPeriod, bool isDefault, uint256 amount);\\r\\n\\r\\n  IGovernanceFactory public governanceFactory; \\r\\n  PoolVoting.Data private _fee;\\r\\n  PoolVoting.Data private _slippageFee;\\r\\n  PoolVoting.Data private _decayPeriod;\\r\\n\\r\\n  constructor(IGovernanceFactory _governanceFactory)\\r\\n  {\\r\\n    governanceFactory = _governanceFactory;\\r\\n    _fee.data.result = _governanceFactory.getDefaultFee().toUint104();\\r\\n    _slippageFee.data.result = _governanceFactory.getDefaultSlippageFee().toUint104();\\r\\n    _decayPeriod.data.result = _governanceFactory.getDefaultDecayPeriod().toUint104();\\r\\n  }\\r\\n\\r\\n  function setGovernanceFactory(IGovernanceFactory _governanceFactory)\\r\\n    external\\r\\n    onlyOwner\\r\\n  {\\r\\n    governanceFactory = _governanceFactory;\\r\\n    this.discardFeeVote();\\r\\n    this.discardSlippageFeeVote();\\r\\n    this.discardDecayPeriodVote();\\r\\n  }\\r\\n\\r\\n  /** Return the current fee */\\r\\n  function getFee()\\r\\n    public\\r\\n    view\\r\\n    returns(uint256)\\r\\n  {\\r\\n    return _fee.data.current();\\r\\n  }\\r\\n\\r\\n  /** Return the current slippage fee */\\r\\n  function getSlippageFee()\\r\\n    public\\r\\n    view\\r\\n    returns(uint256)\\r\\n  {\\r\\n    return _slippageFee.data.current();\\r\\n  }\\r\\n\\r\\n  /** Return the current decay period */\\r\\n  function getDecayPeriod()\\r\\n    public\\r\\n    view\\r\\n    returns(uint256)\\r\\n  {\\r\\n    return _decayPeriod.data.current();\\r\\n  }\\r\\n\\r\\n  function getVirtualFee()\\r\\n    external\\r\\n    view\\r\\n    returns(uint104, uint104, uint48)\\r\\n  {\\r\\n    return (_fee.data.oldResult, _fee.data.result, _fee.data.time);\\r\\n  }\\r\\n\\r\\n  function getVirtualSlippageFee()\\r\\n    external\\r\\n    view\\r\\n    returns(uint104, uint104, uint48)\\r\\n  {\\r\\n    return (_slippageFee.data.oldResult, _slippageFee.data.result, _slippageFee.data.time);\\r\\n  }\\r\\n\\r\\n  function getVirtualDecayPeriod()\\r\\n    external\\r\\n    view\\r\\n    returns(uint104, uint104, uint48)\\r\\n  {\\r\\n    return (_decayPeriod.data.oldResult, _decayPeriod.data.result, _decayPeriod.data.time);\\r\\n  }\\r\\n\\r\\n  /** Return the user vote for the preferred fee */\\r\\n  function getUserFeeVote(address user)\\r\\n    external\\r\\n    view\\r\\n    returns(uint256)\\r\\n  {\\r\\n    return _fee.votes[user].get(governanceFactory.getDefaultFee());\\r\\n  }\\r\\n\\r\\n  /** Return the user vote for the preferred slippage fee */\\r\\n  function getUserSlippageFeeVote(address user)\\r\\n    external\\r\\n    view\\r\\n    returns(uint256)\\r\\n  {\\r\\n    return _slippageFee.votes[user].get(governanceFactory.getDefaultSlippageFee());\\r\\n  }\\r\\n\\r\\n  /** Return the user vote for the preferred decay period */\\r\\n  function getUserDecayPeriodVote(address user)\\r\\n    external\\r\\n    view\\r\\n    returns(uint256)\\r\\n  {\\r\\n    return _decayPeriod.votes[user].get(governanceFactory.getDefaultDecayPeriod());\\r\\n  }\\r\\n\\r\\n  /** Records `msg.senders`'s vote for fee */\\r\\n  function voteFee(uint256 vote) external\\r\\n  {\\r\\n    require(vote <= SwapConstants._MAX_FEE, \\\"GOV_FEE_VOTE_HIGH\\\");\\r\\n    _fee.updateVote(\\r\\n      msg.sender, \\r\\n      _fee.votes[msg.sender], \\r\\n      Vote.init(vote), \\r\\n      balanceOf(msg.sender), \\r\\n      totalSupply(), \\r\\n      governanceFactory.getDefaultFee(), \\r\\n      _emitVoteFeeUpdate\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /** Records `msg.senders`'s vote for slippage fee */\\r\\n  function voteSlippageFee(uint256 vote) external\\r\\n  {\\r\\n    require(vote <= SwapConstants._MAX_SLIPPAGE_FEE, \\\"GOV_SLIPPAGE_FEE_VOTE_HIGH\\\");\\r\\n    _slippageFee.updateVote(\\r\\n      msg.sender, \\r\\n      _slippageFee.votes[msg.sender], \\r\\n      Vote.init(vote), \\r\\n      balanceOf(msg.sender), \\r\\n      totalSupply(), \\r\\n      governanceFactory.getDefaultSlippageFee(), \\r\\n      _emitVoteSlippageFeeUpdate\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /** Records `msg.senders`'s vote for decay period */\\r\\n  function voteDecayPeriod(uint256 vote) external\\r\\n  {\\r\\n    require(vote <= SwapConstants._MAX_DECAY_PERIOD, \\\"GOV_DECAY_PERIOD_VOTE_HIGH\\\");\\r\\n    require(vote >= SwapConstants._MIN_DECAY_PERIOD, \\\"GOV_DECAY_PERIOD_VOTE_LOW\\\");\\r\\n    _decayPeriod.updateVote(\\r\\n      msg.sender, \\r\\n      _decayPeriod.votes[msg.sender], \\r\\n      Vote.init(vote), \\r\\n      balanceOf(msg.sender), \\r\\n      totalSupply(), \\r\\n      governanceFactory.getDefaultDecayPeriod(), \\r\\n      _emitVoteDecayPeriodUpdate\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /** Retracts `msg.senders`'s vote for fee */\\r\\n  function discardFeeVote() external\\r\\n  {\\r\\n    _fee.updateVote(\\r\\n      msg.sender, \\r\\n      _fee.votes[msg.sender], \\r\\n      Vote.init(), \\r\\n      balanceOf(msg.sender), \\r\\n      totalSupply(), \\r\\n      governanceFactory.getDefaultFee(), \\r\\n      _emitVoteFeeUpdate\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /** Retracts `msg.senders`'s vote for slippage fee */\\r\\n  function discardSlippageFeeVote() external\\r\\n  {\\r\\n    _slippageFee.updateVote(\\r\\n      msg.sender, \\r\\n      _slippageFee.votes[msg.sender], \\r\\n      Vote.init(), \\r\\n      balanceOf(msg.sender), \\r\\n      totalSupply(), \\r\\n      governanceFactory.getDefaultSlippageFee(), \\r\\n      _emitVoteSlippageFeeUpdate\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /** Retracts `msg.senders`'s vote for decay period */\\r\\n  function discardDecayPeriodVote() external\\r\\n  {\\r\\n    _decayPeriod.updateVote(\\r\\n      msg.sender, \\r\\n      _decayPeriod.votes[msg.sender], \\r\\n      Vote.init(), \\r\\n      balanceOf(msg.sender), \\r\\n      totalSupply(), \\r\\n      governanceFactory.getDefaultDecayPeriod(), \\r\\n      _emitVoteDecayPeriodUpdate\\r\\n    );\\r\\n  }\\r\\n\\r\\n  function _emitVoteFeeUpdate(address user, uint256 fee, bool isDefault, uint256 amount) private\\r\\n  {\\r\\n    emit FeeVoteUpdated(user, fee, isDefault, amount);\\r\\n  }\\r\\n\\r\\n  function _emitVoteSlippageFeeUpdate(address user, uint256 slippageFee, bool isDefault, uint256 amount) private\\r\\n  {\\r\\n    emit SlippageFeeVoteUpdated(user, slippageFee, isDefault, amount);\\r\\n  }\\r\\n\\r\\n  function _emitVoteDecayPeriodUpdate(address user, uint256 decayPeriod, bool isDefault, uint256 amount) private\\r\\n  {\\r\\n    emit DecayPeriodUpdated(user, decayPeriod, isDefault, amount);\\r\\n  }\\r\\n\\r\\n  function _beforeTokenTransfer(address from, address to, uint256 amount)\\r\\n    internal\\r\\n    override\\r\\n  {\\r\\n    if(from == to) {\\r\\n      return;\\r\\n    }\\r\\n\\r\\n    IGovernanceFactory _governanceFactory = governanceFactory;\\r\\n    bool updateFrom = !(from == address(0) || _governanceFactory.isFeeCollector(from));\\r\\n    bool updateTo = !(to == address(0) || _governanceFactory.isFeeCollector(to));\\r\\n\\r\\n    if(!updateFrom && !updateTo) {\\r\\n      // mint to feeCollector or burn from feeCollector\\r\\n      return;\\r\\n    }\\r\\n\\r\\n    uint256 balanceFrom = (from != address(0)) ? balanceOf(from) : 0;\\r\\n    uint256 balanceTo = (to != address(0)) ? balanceOf(to) : 0;\\r\\n    uint256 newTotalSupply = totalSupply()\\r\\n                              .add(from == address(0) ? amount : 0)\\r\\n                              .sub(to == address(0) ? amount : 0);\\r\\n\\r\\n    ParamsHelper memory params = ParamsHelper({\\r\\n      from: from,\\r\\n      to: to,\\r\\n      updateFrom: updateFrom,\\r\\n      updateTo: updateTo,\\r\\n      amount: amount,\\r\\n      balanceFrom: balanceFrom,\\r\\n      balanceTo: balanceTo,\\r\\n      newTotalSupply: newTotalSupply\\r\\n    });\\r\\n\\r\\n    (uint256 defaultFee, uint256 defaultSlippageFee, uint256 defaultDecayPeriod) = _governanceFactory.defaults();\\r\\n  \\r\\n    _updateOnTransfer(params, defaultFee, _emitVoteFeeUpdate, _fee);\\r\\n    _updateOnTransfer(params, defaultSlippageFee, _emitVoteSlippageFeeUpdate, _slippageFee);\\r\\n    _updateOnTransfer(params, defaultDecayPeriod, _emitVoteDecayPeriodUpdate, _decayPeriod); \\r\\n  }\\r\\n\\r\\n  struct ParamsHelper {\\r\\n    address from;\\r\\n    address to;\\r\\n    bool updateFrom;\\r\\n    bool updateTo;\\r\\n    uint256 amount;\\r\\n    uint256 balanceFrom;\\r\\n    uint256 balanceTo;\\r\\n    uint256 newTotalSupply;\\r\\n  }\\r\\n\\r\\n  function _updateOnTransfer(\\r\\n    ParamsHelper memory params, \\r\\n    uint256 defaultValue,\\r\\n    function(address, uint256, bool, uint256) internal emitEvent,\\r\\n    PoolVoting.Data storage votingData\\r\\n  ) private\\r\\n  {\\r\\n    \\r\\n    Vote.Data memory voteFrom = votingData.votes[params.from];\\r\\n    Vote.Data memory voteTo = votingData.votes[params.to];\\r\\n    \\r\\n    if(voteFrom.isDefault() && voteTo.isDefault() && params.updateFrom && params.updateTo) {\\r\\n      emitEvent(params.from, voteFrom.get(defaultValue), true, params.balanceFrom.sub(params.amount));\\r\\n      emitEvent(params.to, voteTo.get(defaultValue), true, params.balanceTo.add(params.amount));\\r\\n      return;\\r\\n    }\\r\\n    \\r\\n    if(params.updateFrom) {\\r\\n      votingData.updateBalance(\\r\\n        params.from, \\r\\n        voteFrom, \\r\\n        params.balanceFrom, \\r\\n        params.balanceFrom.sub(params.amount), \\r\\n        params.newTotalSupply, \\r\\n        defaultValue, \\r\\n        emitEvent\\r\\n      );\\r\\n    }\\r\\n    \\r\\n    if(params.updateTo) {\\r\\n      votingData.updateBalance(\\r\\n        params.to, \\r\\n        voteTo, \\r\\n        params.balanceTo, \\r\\n        params.balanceTo.add(params.amount), \\r\\n        params.newTotalSupply, \\r\\n        defaultValue, \\r\\n        emitEvent\\r\\n      );\\r\\n    }\\r\\n    \\r\\n  }\\r\\n\\r\\n}\",\"keccak256\":\"0x9514e17b96dcde4af9a8740a80e1024f797d5b6b3570c3a444de76f562e210ff\",\"license\":\"MIT\"},\"contracts/interfaces/IFeeCollector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\ninterface IFeeCollector {\\r\\n  \\r\\n  /** Adds specified `amount` as reward to `receiver` */\\r\\n  function updateReward(address receiver, uint256 amount) external;\\r\\n\\r\\n  function updateRewards(address[] calldata receivers, uint256[] calldata amounts) external;\\r\\n}\",\"keccak256\":\"0x8d092bc45bc47f16fa3a0a7bc0dd93039ed4cf5bc95008bc236f09236b2ccf9a\",\"license\":\"MIT\"},\"contracts/interfaces/IGovernanceFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\n/** Describes methods that provide all the information about current governance contract state */\\r\\ninterface IGovernanceFactory {\\r\\n  \\r\\n  /** Returns information about mooniswap shares */\\r\\n  function getShareParameters()\\r\\n    external \\r\\n    view \\r\\n    returns(uint256, uint256, address, address);\\r\\n\\r\\n    /** Initial settings that contract was created */\\r\\n    function defaults()\\r\\n    external \\r\\n    view \\r\\n    returns(uint256, uint256, uint256);\\r\\n\\r\\n    /** Returns the value of default fee */\\r\\n    function getDefaultFee()\\r\\n    external \\r\\n    view \\r\\n    returns(uint256);\\r\\n\\r\\n    /** Returns the value of default slippage fee */\\r\\n    function getDefaultSlippageFee()\\r\\n    external \\r\\n    view \\r\\n    returns(uint256);\\r\\n\\r\\n    /** Returns the value of default decay period */\\r\\n    function getDefaultDecayPeriod()\\r\\n    external \\r\\n    view \\r\\n    returns(uint256);\\r\\n\\r\\n    /** Returns previous default fee that had place, \\r\\n    * current one and time on which this changed \\r\\n    */\\r\\n    function getVirtualDefaultFee()\\r\\n    external \\r\\n    view \\r\\n    returns(uint104, uint104, uint48);\\r\\n\\r\\n    /** Returns previous default slippage fee that had place, \\r\\n    * current one and time on which this changed \\r\\n    */\\r\\n    function getVirtualDefaultSlippageFee()\\r\\n    external \\r\\n    view \\r\\n    returns(uint104, uint104, uint48);\\r\\n\\r\\n    /** Returns previous default decay period that had place, \\r\\n    * current one and time on which this changed \\r\\n    */\\r\\n    function getVirtualDefaultDecayPeriod()\\r\\n    external \\r\\n    view \\r\\n    returns(uint104, uint104, uint48);\\r\\n\\r\\n    /** Returns the value of referral share */\\r\\n    function getReferralShare()\\r\\n    external \\r\\n    view \\r\\n    returns(uint256);\\r\\n\\r\\n    /** Returns the value of governance share */\\r\\n    function getGovernanceShare()\\r\\n    external \\r\\n    view \\r\\n    returns(uint256);\\r\\n\\r\\n    /** Returns the value of governance wallet address */\\r\\n    function governanceWallet()\\r\\n    external \\r\\n    view \\r\\n    returns(address);\\r\\n\\r\\n    /** Returns the value of fee collector wallet address */\\r\\n    function feeCollector()\\r\\n    external \\r\\n    view \\r\\n    returns(address);\\r\\n\\r\\n    /** Whether the address is current fee collector or was in the past. */\\r\\n    function isFeeCollector(address)\\r\\n    external \\r\\n    view \\r\\n    returns(bool);\\r\\n\\r\\n    /** Whether the contract is currently working and wasn't stopped. */\\r\\n    function isActive()\\r\\n    external \\r\\n    view \\r\\n    returns(bool);\\r\\n}\",\"keccak256\":\"0x6d1e8a8b87f0ee7cce4f297f20f5473247f5f3ee9dd5862d0205745f5121f276\",\"license\":\"MIT\"},\"contracts/lib/ERC20Helper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\n\\r\\nlibrary ERC20Helper {\\r\\n  using SafeERC20 for IERC20;\\r\\n  using SafeMath for uint256;\\r\\n\\r\\n  function isNativeToken(IERC20 token)\\r\\n    internal\\r\\n    pure\\r\\n    returns(bool)\\r\\n  {\\r\\n    return address(token) == address(0);\\r\\n  }\\r\\n\\r\\n  function getBalanceOf(IERC20 token, address account)\\r\\n    internal\\r\\n    view\\r\\n    returns(uint256)\\r\\n  {\\r\\n    if(isNativeToken(token)){\\r\\n      return account.balance;\\r\\n    } else {\\r\\n      return token.balanceOf(account);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function customTransfer(IERC20 token, address payable to, uint256 amount) internal\\r\\n  {\\r\\n    if(amount > 0){\\r\\n      if(isNativeToken(token)){\\r\\n        to.transfer(amount);\\r\\n      } else {\\r\\n        token.safeTransfer(to, amount);\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function customTransferFrom(IERC20 token, address payable from, address to, uint256 amount) internal\\r\\n  {\\r\\n    if(amount > 0){\\r\\n      if(isNativeToken(token)){\\r\\n        require(msg.value >= amount, \\\"ERC20Helper_VALUE_NOT_ENOUGH\\\");\\r\\n        require(from == msg.sender, \\\"ERC20Helper_FROM_NOT_SENDER\\\");\\r\\n        require(to == address(this), \\\"ERC20Helper_TO_NOT_THIS\\\");\\r\\n        if(msg.value > amount) {\\r\\n          //Return the remaining to user\\r\\n          from.transfer(msg.value.sub(amount));\\r\\n        }\\r\\n      } else {\\r\\n        token.safeTransferFrom(from, to, amount);\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function getSymbol(IERC20 token)\\r\\n    internal\\r\\n    view\\r\\n    returns(string memory)\\r\\n  {\\r\\n    if(isNativeToken(token)){\\r\\n      return \\\"ETH\\\";\\r\\n    }\\r\\n\\r\\n    (bool success, bytes memory data) = address(token).staticcall{ gas: 20000}(\\r\\n      abi.encodeWithSignature(\\\"symbol()\\\")\\r\\n    );\\r\\n\\r\\n    if(!success){\\r\\n      (success, data) =  address(token).staticcall{ gas: 20000}(\\r\\n        abi.encodeWithSignature(\\\"SYMBOL()\\\")\\r\\n      );\\r\\n    }\\r\\n\\r\\n    if(success && data.length >= 96) {\\r\\n      (uint256 offset, uint256 length) = abi.decode(data, (uint256, uint256));\\r\\n      if(offset == 0x20 && length > 0 && length <= 256) {\\r\\n        return string(abi.decode(data, (bytes)));\\r\\n      }\\r\\n    }\\r\\n\\r\\n    if(success && data.length == 32) {\\r\\n      uint length = 0;\\r\\n      while (length < data.length && data[length] >= 0x20 && data[length] <= 0x7E) {\\r\\n        length++;\\r\\n      }\\r\\n\\r\\n      if(length > 0) {\\r\\n        bytes memory result = new bytes(length);\\r\\n        for(uint i = 0; i < length; i++) {\\r\\n          result[i] = data[i];\\r\\n        }\\r\\n        return string(result);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    return _toHex(address(token));\\r\\n  }\\r\\n\\r\\n  function _toHex(address token)\\r\\n    private\\r\\n    pure\\r\\n    returns(string memory)\\r\\n  {\\r\\n    return _toHex(abi.encodePacked(token));\\r\\n  }\\r\\n\\r\\n  function _toHex(bytes memory data)\\r\\n    private\\r\\n    pure\\r\\n    returns(string memory)\\r\\n  {\\r\\n    bytes memory str = new bytes(2 + data.length * 2);\\r\\n    str[0] = \\\"0\\\";\\r\\n    str[1] = \\\"x\\\";\\r\\n    uint j = 2;\\r\\n    for(uint i = 0; i < data.length; i++) {\\r\\n      uint a = uint8(data[i]) >> 4;\\r\\n      uint b = uint8(data[i]) & 0x0f;\\r\\n      str[j++] = bytes1(uint8(a + 48 + (a/10) * 39));\\r\\n      str[j++] = bytes1(uint8(b + 48 + (b/10) * 39));\\r\\n    }\\r\\n\\r\\n    return string(str);\\r\\n  }\\r\\n\\r\\n}\",\"keccak256\":\"0x8b36fd8cded7b6819f06707f3e0cb0908a1939098158dac288c2f87578b38eee\",\"license\":\"MIT\"},\"contracts/lib/PoolVoting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"./SafeCast.sol\\\";\\r\\nimport \\\"./VirtualVote.sol\\\";\\r\\nimport \\\"./Vote.sol\\\";\\r\\n\\r\\nlibrary PoolVoting {\\r\\n  using SafeMath for uint256;\\r\\n  using SafeCast for uint256;\\r\\n  using Vote for Vote.Data;\\r\\n  using VirtualVote for VirtualVote.Data;\\r\\n\\r\\n  struct Data {\\r\\n    VirtualVote.Data data;\\r\\n    uint256 weightedSum;\\r\\n    uint256 defaultVote;\\r\\n    mapping(address => Vote.Data) votes;\\r\\n  }\\r\\n\\r\\n  function updateVote(\\r\\n    PoolVoting.Data storage self,\\r\\n    address user,\\r\\n    Vote.Data memory oldVote,\\r\\n    Vote.Data memory newVote,\\r\\n    uint256 balance,\\r\\n    uint256 totalSupply,\\r\\n    uint256 defaultVote,\\r\\n    function(address, uint256, bool, uint256) emitEvent\\r\\n  ) internal {\\r\\n    return _update(self, user, oldVote, newVote, balance, balance, totalSupply, defaultVote, emitEvent);\\r\\n  }\\r\\n\\r\\n  function updateBalance(\\r\\n    PoolVoting.Data storage self,\\r\\n    address user,\\r\\n    Vote.Data memory oldVote,\\r\\n    uint256 oldBalance,\\r\\n    uint256 newBalance,\\r\\n    uint256 newTotalSupply,\\r\\n    uint256 defaultVote,\\r\\n    function(address, uint256, bool, uint256) emitEvent\\r\\n  ) internal {\\r\\n    return _update(\\r\\n      self, \\r\\n      user, \\r\\n      oldVote, \\r\\n      newBalance == 0 ? Vote.init() : oldVote, \\r\\n      oldBalance, \\r\\n      newBalance, \\r\\n      newTotalSupply, \\r\\n      defaultVote, \\r\\n      emitEvent\\r\\n    );\\r\\n  }\\r\\n\\r\\n  function _update(\\r\\n    PoolVoting.Data storage self,\\r\\n    address user,\\r\\n    Vote.Data memory oldVote,\\r\\n    Vote.Data memory newVote,\\r\\n    uint256 oldBalance,\\r\\n    uint256 newBalance,\\r\\n    uint256 totalSupply,\\r\\n    uint256 defaultVote,\\r\\n    function(address, uint256, bool, uint256) emitEvent\\r\\n  ) private {\\r\\n    uint256 oldWeightedSum = self.weightedSum;\\r\\n    uint256 newWeightedSum = oldWeightedSum;\\r\\n    uint256 oldDefaultVote = self.defaultVote;\\r\\n    uint256 newDefaultVote = oldDefaultVote;\\r\\n    \\r\\n    if(oldVote.isDefault()) {\\r\\n      newDefaultVote = newDefaultVote.sub(oldBalance);\\r\\n    } else {\\r\\n      newWeightedSum = newWeightedSum.sub(oldBalance.mul(oldVote.get(defaultVote)));\\r\\n    }\\r\\n     \\r\\n    if(newVote.isDefault()) {\\r\\n      newDefaultVote = newDefaultVote.add(newBalance);\\r\\n    } else {\\r\\n      newWeightedSum = newWeightedSum.add(newBalance.mul(newVote.get(defaultVote)));\\r\\n    }\\r\\n   \\r\\n    if(newWeightedSum != oldWeightedSum){\\r\\n      self.weightedSum = newWeightedSum;\\r\\n    }\\r\\n\\r\\n    if(newDefaultVote != oldDefaultVote){\\r\\n      self.defaultVote = newDefaultVote;\\r\\n    }\\r\\n\\r\\n    {\\r\\n      uint256 newResult = totalSupply == 0 ? defaultVote : newWeightedSum.add(newDefaultVote.mul(defaultVote)).div(totalSupply);\\r\\n      VirtualVote.Data memory data = self.data;\\r\\n      if(newResult != data.result){\\r\\n        VirtualVote.Data storage sdata = self.data;\\r\\n        (sdata.oldResult, sdata.result, sdata.time) = (\\r\\n          data.current().toUint104(),\\r\\n          newResult.toUint104(),\\r\\n          block.timestamp.toUint48()\\r\\n        );\\r\\n      }\\r\\n    }\\r\\n\\r\\n    if(!newVote.eq(oldVote)){\\r\\n      self.votes[user] = newVote;\\r\\n    }\\r\\n\\r\\n    emitEvent(user, newVote.get(defaultVote), newVote.isDefault(), newBalance);\\r\\n  }\\r\\n}\",\"keccak256\":\"0x6baceea20f150ec751baa830f254d4c7f4fecfb71803ece7b32b78aeaa1d8312\",\"license\":\"MIT\"},\"contracts/lib/SQRT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nlibrary SQRT {\\r\\n  \\r\\n  /** https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method */\\r\\n  function sqrt(uint256 y) \\r\\n    internal\\r\\n    pure\\r\\n    returns(uint256)\\r\\n  {\\r\\n    if(y > 3) {\\r\\n      uint256 z = y;\\r\\n      uint256 x = y / 2 + 1;\\r\\n      while(x < z) {\\r\\n        z = x;\\r\\n        x = (y / x + x) / 2;\\r\\n      }\\r\\n      return z;\\r\\n    } else if (y != 0){\\r\\n      return 1;\\r\\n    } else {\\r\\n      return 0;\\r\\n    }\\r\\n  }\\r\\n\\r\\n}\",\"keccak256\":\"0x37f51446a8f9a8bf3616717d0e8504c750ab43c9ea34a9e38ac66366959af49c\",\"license\":\"MIT\"},\"contracts/lib/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nlibrary SafeCast {\\r\\n  \\r\\n  function toUint216(uint256 value) \\r\\n    internal\\r\\n    pure\\r\\n    returns(uint216)\\r\\n  {\\r\\n    require(value < 2**216, \\\"value does not fit in 216 bits\\\");\\r\\n    return uint216(value);\\r\\n  }\\r\\n\\r\\n  function toUint104(uint256 value) \\r\\n    internal\\r\\n    pure\\r\\n    returns(uint104)\\r\\n  {\\r\\n    require(value < 2**104, \\\"value does not fit in 104 bits\\\");\\r\\n    return uint104(value);\\r\\n  }\\r\\n\\r\\n  function toUint48(uint256 value) \\r\\n    internal\\r\\n    pure\\r\\n    returns(uint48)\\r\\n  {\\r\\n    require(value < 2**48, \\\"value does not fit in 48 bits\\\");\\r\\n    return uint48(value);\\r\\n  }\\r\\n\\r\\n  function toUint40(uint256 value) \\r\\n    internal\\r\\n    pure\\r\\n    returns(uint40)\\r\\n  {\\r\\n    require(value < 2**40, \\\"value does not fit in 40 bits\\\");\\r\\n    return uint40(value);\\r\\n  }\\r\\n\\r\\n}\",\"keccak256\":\"0x817ead41a088c9cbc8080e3345811c39c12936e487e5916f37f51a66bfe09ba9\",\"license\":\"MIT\"},\"contracts/lib/SwapConstants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nlibrary SwapConstants {\\r\\n  \\r\\n  uint256 internal constant _FEE_DENOMINATOR = 1e18;\\r\\n\\r\\n  uint256 internal constant _MIN_REFERRAL_SHARE = 0.05e18; // 5%\\r\\n  uint256 internal constant _MIN_DECAY_PERIOD = 1 minutes;\\r\\n\\r\\n  uint256 internal constant _MAX_FEE = 0.01e18; // 1%\\r\\n  uint256 internal constant _MAX_SLIPPAGE_FEE = 1e18; // 100%\\r\\n  uint256 internal constant _MAX_SHARE = 0.1e18; // 10%\\r\\n  uint256 internal constant _MAX_DECAY_PERIOD = 5 minutes;\\r\\n\\r\\n  uint256 internal constant _DEFAULT_FEE = 0;\\r\\n  uint256 internal constant _DEFAULT_SLIPPAGE_FEE = 1e18; // 100%\\r\\n  uint256 internal constant _DEFAULT_REFERRAL_SHARE = 0.1e18; // 10%\\r\\n  uint256 internal constant _DEFAULT_GOVERNANCE_SHARE = 0;\\r\\n  uint256 internal constant _DEFAULT_DECAY_PERIOD = 1 minutes;\\r\\n\\r\\n}\",\"keccak256\":\"0x816802904c9252c8881b9bba8a9003e9b8881a5b04b1f0a3c34e65c242285938\",\"license\":\"MIT\"},\"contracts/lib/VirtualBalance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"./SafeCast.sol\\\";\\r\\n\\r\\nlibrary VirtualBalance {\\r\\n  using SafeCast for uint256;\\r\\n  using SafeMath for uint256;\\r\\n\\r\\n  struct Data {\\r\\n    uint216 balance;\\r\\n    uint40 time;\\r\\n  }\\r\\n\\r\\n  function set(VirtualBalance.Data storage self, uint256 balance) internal {\\r\\n    (self.balance, self.time) = (\\r\\n      balance.toUint216(),\\r\\n      block.timestamp.toUint40()\\r\\n    );\\r\\n  }\\r\\n\\r\\n  function update(VirtualBalance.Data storage self, uint256 decayPeriod, uint256 realBalance) internal {\\r\\n    set(self, current(self, decayPeriod, realBalance));\\r\\n  }\\r\\n\\r\\n  function scale(VirtualBalance.Data storage self, uint256 decayPeriod, uint256 realBalance, uint256 num, uint256 denom) internal {\\r\\n    set(self, current(self, decayPeriod, realBalance).mul(num).add(denom.sub(1)).div(denom));\\r\\n  }\\r\\n\\r\\n  function current(VirtualBalance.Data memory self, uint256 decayPeriod, uint256 realBalance) \\r\\n    internal \\r\\n    view\\r\\n    returns(uint256)\\r\\n  {\\r\\n    uint256 timePassed = Math.min(decayPeriod, block.timestamp.sub(self.time));\\r\\n    uint256 timeRemain = decayPeriod.sub(timePassed);\\r\\n    return uint256(self.balance).mul(timeRemain).add(\\r\\n      realBalance.mul(timePassed)\\r\\n    ).div(decayPeriod);\\r\\n  }\\r\\n}\",\"keccak256\":\"0xa56c85c352aad2400a9ff7074acace2bed5cada591801e9fd026020c6317556f\",\"license\":\"MIT\"},\"contracts/lib/VirtualVote.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\n\\r\\n\\r\\nlibrary VirtualVote {\\r\\n  using SafeMath for uint256;\\r\\n\\r\\n  uint256 private constant _VOTE_DECAY_PERIOD = 1 days;\\r\\n\\r\\n  struct Data {\\r\\n    uint104 oldResult;\\r\\n    uint104 result;\\r\\n    uint48 time;\\r\\n  }\\r\\n\\r\\n  function current(VirtualVote.Data memory self) \\r\\n    internal \\r\\n    view\\r\\n    returns(uint256)\\r\\n  {\\r\\n    uint256 timePassed = Math.min(_VOTE_DECAY_PERIOD, block.timestamp.sub(self.time));\\r\\n    uint256 timeRemain = _VOTE_DECAY_PERIOD.sub(timePassed);\\r\\n    return uint256(self.oldResult).mul(timeRemain).add(\\r\\n      uint256(self.result).mul(timePassed)\\r\\n    ).div(_VOTE_DECAY_PERIOD);\\r\\n  }\\r\\n}\",\"keccak256\":\"0x17dfd686239b10ee0b2fec2086cdbaa2365b841bfde0498025c6d2970f76d48c\",\"license\":\"MIT\"},\"contracts/lib/Vote.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nlibrary Vote {\\r\\n\\r\\n  struct Data {\\r\\n    uint256 value;\\r\\n  }\\r\\n\\r\\n  function eq(Vote.Data memory self, Vote.Data memory vote) \\r\\n    internal \\r\\n    pure\\r\\n    returns(bool)\\r\\n  {\\r\\n    return self.value == vote.value;\\r\\n  }\\r\\n\\r\\n  function init() \\r\\n    internal \\r\\n    pure\\r\\n    returns(Vote.Data memory data)\\r\\n  {\\r\\n    return Vote.Data({\\r\\n      value: 0\\r\\n    });\\r\\n  }\\r\\n\\r\\n  function init(uint256 vote) \\r\\n    internal \\r\\n    pure\\r\\n    returns(Vote.Data memory data)\\r\\n  {\\r\\n    return Vote.Data({\\r\\n      value: vote + 1\\r\\n    });\\r\\n  }\\r\\n\\r\\n  function isDefault(Data memory self) \\r\\n    internal \\r\\n    pure\\r\\n    returns(bool)\\r\\n  {\\r\\n    return self.value == 0;\\r\\n  }\\r\\n\\r\\n  function get(Data memory self, uint256 defaultVote) \\r\\n    internal \\r\\n    pure\\r\\n    returns(uint256)\\r\\n  {\\r\\n    if(self.value > 0){\\r\\n      return self.value - 1;\\r\\n    }\\r\\n\\r\\n    return defaultVote; \\r\\n  }\\r\\n\\r\\n  function get(Data memory self, function () external view returns(uint256) defaultVoteFn) \\r\\n    internal \\r\\n    view\\r\\n    returns(uint256)\\r\\n  {\\r\\n    if(self.value > 0){\\r\\n      return self.value - 1;\\r\\n    }\\r\\n\\r\\n    return defaultVoteFn();\\r\\n    \\r\\n  }\\r\\n\\r\\n}\",\"keccak256\":\"0x5cb7a9a02c5acf45bd5b09c1caa9182c744270e441324bc165130ee9c4a6977c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50615aaa806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063b92440b014610030575b600080fd5b61004361003e366004610160565b61005f565b6040516001600160a01b03909116815260200160405180910390f35b6000878787878787336040516100749061010b565b610084979695949392919061022f565b604051809103906000f0801580156100a0573d6000803e3d6000fd5b5060405163f2fde38b60e01b81526001600160a01b0384811660048301529192509082169063f2fde38b90602401600060405180830381600087803b1580156100e857600080fd5b505af11580156100fc573d6000803e3d6000fd5b50505050979650505050505050565b6157d7806200029e83390190565b60008083601f84011261012a578182fd5b50813567ffffffffffffffff811115610141578182fd5b60208301915083602082850101111561015957600080fd5b9250929050565b600080600080600080600060a0888a03121561017a578283fd5b873561018581610285565b9650602088013561019581610285565b9550604088013567ffffffffffffffff808211156101b1578485fd5b6101bd8b838c01610119565b909750955060608a01359150808211156101d5578485fd5b506101e28a828b01610119565b90945092505060808801356101f681610285565b8091505092959891949750929550565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b600060018060a01b03808a168352808916602084015260a0604084015261025a60a08401888a610206565b838103606085015261026d818789610206565b92505080841660808401525098975050505050505050565b6001600160a01b038116811461029a57600080fd5b5056fe60c06040523480156200001157600080fd5b50604051620057d7380380620057d7833981016040819052620000349162000540565b80838381600390805190602001906200004f929190620003f1565b50805162000065906004906020840190620003f1565b505050620000826200007c6200034060201b60201c565b62000344565b6001600655600780546001600160a01b0319166001600160a01b0383169081179091556040805163043759e560e31b815290516200012d92916321bacf28916004808301926020929190829003018186803b158015620000e157600080fd5b505afa158015620000f6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200011c9190620005e9565b6200039660201b620029251760201c565b6008600001600001600d6101000a8154816001600160681b0302191690836001600160681b0316021790555062000197816001600160a01b031663b975d0bb6040518163ffffffff1660e01b815260040160206040518083038186803b158015620000e157600080fd5b600c600001600001600d6101000a8154816001600160681b0302191690836001600160681b0316021790555062000201816001600160a01b0316639386e8b26040518163ffffffff1660e01b815260040160206040518083038186803b158015620000e157600080fd5b601080546001600160681b0392909216600160681b02600160681b600160d01b0319909216919091179055508251620002735760405162461bcd60e51b815260206004820152600f60248201526e535741505f4e414d455f454d50545960881b60448201526064015b60405180910390fd5b6000825111620002ba5760405162461bcd60e51b8152602060048201526011602482015270535741505f53594d424f4c5f454d50545960781b60448201526064016200026a565b836001600160a01b0316856001600160a01b031614156200031e5760405162461bcd60e51b815260206004820152601460248201527f535741505f54574f5f544f4b454e535f53414d4500000000000000000000000060448201526064016200026a565b5050506001600160601b0319606092831b8116608052911b1660a0526200066e565b3390565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000600160681b8210620003ed5760405162461bcd60e51b815260206004820152601e60248201527f76616c756520646f6573206e6f742066697420696e203130342062697473000060448201526064016200026a565b5090565b828054620003ff9062000602565b90600052602060002090601f0160209004810192826200042357600085556200046e565b82601f106200043e57805160ff19168380011785556200046e565b828001600101855582156200046e579182015b828111156200046e57825182559160200191906001019062000451565b50620003ed9291505b80821115620003ed576000815560010162000477565b600082601f8301126200049e578081fd5b81516001600160401b0380821115620004bb57620004bb6200063f565b604051601f8301601f19908116603f01168101908282118183101715620004e657620004e66200063f565b8160405283815260209250868385880101111562000502578485fd5b8491505b8382101562000525578582018301518183018401529082019062000506565b838211156200053657848385830101525b9695505050505050565b600080600080600060a0868803121562000558578081fd5b8551620005658162000655565b6020870151909550620005788162000655565b60408701519094506001600160401b038082111562000595578283fd5b620005a389838a016200048d565b94506060880151915080821115620005b9578283fd5b50620005c8888289016200048d565b9250506080860151620005db8162000655565b809150509295509295909350565b600060208284031215620005fb578081fd5b5051919050565b600181811c908216806200061757607f821691505b602082108114156200063957634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146200066b57600080fd5b50565b60805160601c60a05160601c6150db620006fc6000396000818161084e01528181610beb015281816112b7015281816113830152818161164201528181611fa3015281816127e401526134f901526000818161030501528181610bc601528181611280015281816113010152818161161d01528181611f41015281816127b401526134bc01526150db6000f3fe6080604052600436106102935760003560e01c806393028d831161015a578063cad07066116100c1578063e331d0391161007a578063e331d039146108c3578063e4b50cb8146108d6578063ee5d1859146108f6578063f2fde38b1461093c578063f3bf09bb1461095c578063f76d13b41461099757600080fd5b8063cad0706614610807578063ced72f8714610827578063d21220a71461083c578063d2fd9eba14610870578063d5bcb9b514610890578063dd62ed3e146108a357600080fd5b8063a9059cbb11610113578063a9059cbb146106b9578063aa6ca808146106d9578063ac9d6f95146106fb578063b1ec4c4014610766578063bd10cd80146107c7578063c515ee23146107e757600080fd5b806393028d831461061c578063936f0a151461063157806395d89b41146106515780639ab7fdd6146106665780639ea5ce0a14610686578063a457c2d71461069957600080fd5b8063487ca261116101fe57806370a08231116101b757806370a0823114610574578063715018a614610594578063728c769a146105a957806378e3214f146105be5780638da5cb5b146105de578063907e4f36146105fc57600080fd5b8063487ca261146104c85780634b4c9ce5146104ea5780635915d8061461050a5780635a08c2611461052a5780636515aa291461054a5780636669302a1461055f57600080fd5b806323b872dd1161025057806323b872dd146103fe5780632a519ec81461041e5780633049105d1461043e578063313ce5671461045f578063395093511461047b5780633c6216a61461049b57600080fd5b806306fdde0314610298578063095ea7b3146102c35780630dfe1681146102f357806318160ddd1461033f5780631a08b5551461035e5780631f495dda146103c3575b600080fd5b3480156102a457600080fd5b506102ad6109ac565b6040516102ba9190614e77565b60405180910390f35b3480156102cf57600080fd5b506102e36102de366004614a78565b610a3e565b60405190151581526020016102ba565b3480156102ff57600080fd5b506103277f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016102ba565b34801561034b57600080fd5b506002545b6040519081526020016102ba565b34801561036a57600080fd5b506008546001600160681b0380821691600160681b810490911690600160d01b900465ffffffffffff165b604080516001600160681b03948516815293909216602084015265ffffffffffff16908201526060016102ba565b3480156103cf57600080fd5b506010546001600160681b0380821691600160681b810490911690600160d01b900465ffffffffffff16610395565b34801561040a57600080fd5b506102e3610419366004614a38565b610a58565b34801561042a57600080fd5b506103506104393660046149e4565b610a7e565b61045161044c366004614aa3565b610b37565b6040516102ba929190614f16565b34801561046b57600080fd5b50604051601281526020016102ba565b34801561048757600080fd5b506102e3610496366004614a78565b610b57565b3480156104a757600080fd5b506104bb6104b6366004614c95565b610b79565b6040516102ba9190614e69565b3480156104d457600080fd5b506104e86104e3366004614c20565b610e2d565b005b3480156104f657600080fd5b506103506105053660046149e4565b610f4a565b34801561051657600080fd5b506104bb610525366004614c50565b610fc0565b34801561053657600080fd5b506104e8610545366004614c20565b610fd3565b34801561055657600080fd5b506103506110fa565b34801561056b57600080fd5b506104e8611148565b34801561058057600080fd5b5061035061058f3660046149e4565b611187565b3480156105a057600080fd5b506104e86111a2565b3480156105b557600080fd5b506103506111d6565b3480156105ca57600080fd5b506104e86105d9366004614a78565b61121f565b3480156105ea57600080fd5b506005546001600160a01b0316610327565b34801561060857600080fd5b50600754610327906001600160a01b031681565b34801561062857600080fd5b506104e861145c565b34801561063d57600080fd5b5061035061064c3660046149e4565b611499565b34801561065d57600080fd5b506102ad61150f565b34801561067257600080fd5b506103506106813660046149e4565b61151e565b610451610694366004614ad7565b6115d7565b3480156106a557600080fd5b506102e36106b4366004614a78565b611e8b565b3480156106c557600080fd5b506102e36106d4366004614a78565b611f11565b3480156106e557600080fd5b506106ee611f1f565b6040516102ba9190614e1c565b34801561070757600080fd5b506107416107163660046149e4565b6016602052600090815260409020546001600160d81b03811690600160d81b900464ffffffffff1682565b604080516001600160d81b03909316835264ffffffffff9091166020830152016102ba565b34801561077257600080fd5b506107a76107813660046149e4565b6014602052600090815260409020546001600160801b0380821691600160801b90041682565b604080516001600160801b039384168152929091166020830152016102ba565b3480156107d357600080fd5b506103506107e23660046149e4565b612006565b3480156107f357600080fd5b50610350610802366004614b3f565b6120bf565b34801561081357600080fd5b506104e8610822366004614c20565b6120f6565b34801561083357600080fd5b50610350612268565b34801561084857600080fd5b506103277f000000000000000000000000000000000000000000000000000000000000000081565b34801561087c57600080fd5b506104e861088b3660046149e4565b6122b1565b61035061089e366004614b53565b6123ef565b3480156108af57600080fd5b506103506108be366004614a00565b612409565b6103506108d1366004614bb1565b612434565b3480156108e257600080fd5b506103276108f1366004614c20565b6127aa565b34801561090257600080fd5b506107416109113660046149e4565b6015602052600090815260409020546001600160d81b03811690600160d81b900464ffffffffff1682565b34801561094857600080fd5b506104e86109573660046149e4565b612850565b34801561096857600080fd5b50600c546001600160681b0380821691600160681b810490911690600160d01b900465ffffffffffff16610395565b3480156109a357600080fd5b506104e86128e8565b6060600380546109bb90615014565b80601f01602080910402602001604051908101604052809291908181526020018280546109e790615014565b8015610a345780601f10610a0957610100808354040283529160200191610a34565b820191906000526020600020905b815481529060010190602001808311610a1757829003601f168201915b5050505050905090565b600033610a4c81858561297e565b60019150505b92915050565b600033610a66858285612aa3565b610a71858585612b1d565b60019150505b9392505050565b6000610a52600760009054906101000a90046001600160a01b03166001600160a01b0316639386e8b26040518163ffffffff1660e01b815260040160206040518083038186803b158015610ad157600080fd5b505afa158015610ae5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b099190614c38565b6001600160a01b03841660009081526013602090815260409182902082519182019092529054815290612cf6565b6000610b416148b3565b610b4c8484336115d7565b915091509250929050565b600033610a4c818585610b6a8383612409565b610b749190614f55565b61297e565b610b816148b3565b60026006541415610bad5760405162461bcd60e51b8152600401610ba490614edf565b60405180910390fd5b6002600655604080518082019091526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811682527f00000000000000000000000000000000000000000000000000000000000000001660208201526000610c1b60025490565b90506000610c276111d6565b9050610c333388612d1b565b60005b6002811015610dca576000848260028110610c6157634e487b7160e01b600052603260045260246000fd5b602002015190506000610c7d6001600160a01b03831630612e72565b90506000610c9586610c8f848e612f0c565b90612f18565b9050610cab6001600160a01b0384168a83612f24565b80888560028110610ccc57634e487b7160e01b600052603260045260246000fd5b6020020152895184101580610d085750898481518110610cfc57634e487b7160e01b600052603260045260246000fd5b60200260200101518110155b610d545760405162461bcd60e51b815260206004820152601f60248201527f535741505f57495448445241575f524553554c545f4e4f545f454e4f554748006044820152606401610ba4565b610d848583610d63898f612f82565b6001600160a01b03871660009081526016602052604090209291908a612f8e565b610db48583610d93898f612f82565b6001600160a01b03871660009081526015602052604090209291908a612f8e565b5050508080610dc290615049565b915050610c36565b508351602080860151604080518b8152928301939093528183015290516001600160a01b0387169133917f3cae9923fd3c2f468aa25a8ef687923e37f957459557c0380fd06526c0b8cdbc9181900360600190a350506001600655509392505050565b662386f26fc10000811115610e785760405162461bcd60e51b815260206004820152601160248201527008e9eacbe8c8a8abeac9ea88abe90928e9607b1b6044820152606401610ba4565b336000818152600b6020908152604091829020825191820190925290548152610f479190610ea584612feb565b610eae33611187565b600254600760009054906101000a90046001600160a01b03166001600160a01b03166321bacf286040518163ffffffff1660e01b815260040160206040518083038186803b158015610eff57600080fd5b505afa158015610f13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f379190614c38565b600895949392919061301a61306e565b50565b600080610f606001600160a01b03841630612e72565b9050610a77610fba610f706111d6565b6001600160a01b0386166000908152601560209081526040918290208251808401909352546001600160d81b0381168352600160d81b900464ffffffffff16908201529084613089565b826130e4565b610fc86148b3565b610a77838333610b79565b670de0b6b3a764000081111561102b5760405162461bcd60e51b815260206004820152601a60248201527f474f565f534c4950504147455f4645455f564f54455f484947480000000000006044820152606401610ba4565b336000818152600f6020908152604091829020825191820190925290548152610f47919061105884612feb565b61106133611187565b600254600760009054906101000a90046001600160a01b03166001600160a01b031663b975d0bb6040518163ffffffff1660e01b815260040160206040518083038186803b1580156110b257600080fd5b505afa1580156110c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ea9190614c38565b600c9594939291906130fb61306e565b60408051606081018252600c546001600160681b038082168352600160681b8204166020830152600160d01b900465ffffffffffff169181019190915260009061114390613145565b905090565b336000818152600f602090815260408083208151808401835290548152815180840183528490528151928301909152918152611185929190611058565b565b6001600160a01b031660009081526020819052604090205490565b6005546001600160a01b031633146111cc5760405162461bcd60e51b8152600401610ba490614eaa565b61118560006131c0565b604080516060810182526010546001600160681b038082168352600160681b8204166020830152600160d01b900465ffffffffffff169181019190915260009061114390613145565b600260065414156112425760405162461bcd60e51b8152600401610ba490614edf565b60026006556005546001600160a01b031633146112715760405162461bcd60e51b8152600401610ba490614eaa565b60006112a66001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630612e72565b905060006112dd6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630612e72565b90506112f36001600160a01b0385163385612f24565b816113276001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630612e72565b10156113755760405162461bcd60e51b815260206004820152601860248201527f535741505f5245534355455f44454e4945445f42414c5f3000000000000000006044820152606401610ba4565b806113a96001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630612e72565b10156113f75760405162461bcd60e51b815260206004820152601860248201527f535741505f5245534355455f44454e4945445f42414c5f3100000000000000006044820152606401610ba4565b6103e861140330611187565b10156114515760405162461bcd60e51b815260206004820152601e60248201527f535741505f5245534355455f44454e4945445f424153455f535550504c5900006044820152606401610ba4565b505060016006555050565b336000818152600b602090815260408083208151808401835290548152815180840183528490528151928301909152918152611185929190610ea5565b6000806114af6001600160a01b03841630612e72565b9050610a776115096114bf6111d6565b6001600160a01b0386166000908152601660209081526040918290208251808401909352546001600160d81b0381168352600160d81b900464ffffffffff16908201529084613089565b82613212565b6060600480546109bb90615014565b6000610a52600760009054906101000a90046001600160a01b03166001600160a01b031663b975d0bb6040518163ffffffff1660e01b815260040160206040518083038186803b15801561157157600080fd5b505afa158015611585573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115a99190614c38565b6001600160a01b0384166000908152600f602090815260409182902082519182019092529054815290612cf6565b60006115e16148b3565b600260065414156116045760405162461bcd60e51b8152600401610ba490614edf565b6002600655604080518082019091526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811682527f00000000000000000000000000000000000000000000000000000000000000001660208201526116808160005b60200201516001600160a01b03161590565b6116a45761168f81600161166e565b61169a5760006116a7565b60208601516116a7565b85515b34146116f55760405162461bcd60e51b815260206004820152601c60248201527f535741505f4445504f5349545f57524f4e475f4d53475f56414c5545000000006044820152606401610ba4565b600061170060025490565b90508061192c576117146103e86063612f0c565b9350611722306103e8613221565b60005b60028110156119265761175c8589836002811061175257634e487b7160e01b600052603260045260246000fd5b60200201516130e4565b9450600088826002811061178057634e487b7160e01b600052603260045260246000fd5b6020020151116117d25760405162461bcd60e51b815260206004820152601d60248201527f535741505f4445504f5349545f414d4f554e545f49535f5a45524f5f300000006044820152606401610ba4565b8681600281106117f257634e487b7160e01b600052603260045260246000fd5b602002015188826002811061181757634e487b7160e01b600052603260045260246000fd5b6020020151101561186a5760405162461bcd60e51b815260206004820152601d60248201527f535741505f4445504f5349545f4d494e5f414d4f554e545f4c4f575f300000006044820152606401610ba4565b6118ca33308a846002811061188f57634e487b7160e01b600052603260045260246000fd5b60200201518685600281106118b457634e487b7160e01b600052603260045260246000fd5b60200201516001600160a01b031692919061330c565b8781600281106118ea57634e487b7160e01b600052603260045260246000fd5b602002015184826002811061190f57634e487b7160e01b600052603260045260246000fd5b60200201528061191e81615049565b915050611725565b50611dcd565b6119346148b3565b60005b60028110156119e8576119b161196685836002811061166e57634e487b7160e01b600052603260045260246000fd5b611971576000611973565b345b6119ab3087856002811061199757634e487b7160e01b600052603260045260246000fd5b60200201516001600160a01b031690612e72565b90613483565b8282600281106119d157634e487b7160e01b600052603260045260246000fd5b6020020152806119e081615049565b915050611937565b50600019945060005b6002811015611a6e57611a5a86611a55848460028110611a2157634e487b7160e01b600052603260045260246000fd5b6020020151610c8f8d8660028110611a4957634e487b7160e01b600052603260045260246000fd5b60200201518890612f0c565b613212565b955080611a6681615049565b9150506119f1565b508460005b6002811015611cb75760008a8260028110611a9e57634e487b7160e01b600052603260045260246000fd5b602002015111611af05760405162461bcd60e51b815260206004820152601d60248201527f535741505f4445504f5349545f414d4f554e545f49535f5a45524f5f310000006044820152606401610ba4565b6000611b3985610c8f611b04600183614fd1565b611b3387898860028110611b2857634e487b7160e01b600052603260045260246000fd5b602002015190612f0c565b90612f82565b9050898260028110611b5b57634e487b7160e01b600052603260045260246000fd5b6020020151811015611baf5760405162461bcd60e51b815260206004820152601d60248201527f535741505f4445504f5349545f4d494e5f414d4f554e545f4c4f575f310000006044820152606401610ba4565b611bd53330838986600281106118b457634e487b7160e01b600052603260045260246000fd5b611c21848360028110611bf857634e487b7160e01b600052603260045260246000fd5b60200201516119ab3089866002811061199757634e487b7160e01b600052603260045260246000fd5b878360028110611c4157634e487b7160e01b600052603260045260246000fd5b6020020152611ca188611a55868560028110611c6d57634e487b7160e01b600052603260045260246000fd5b6020020151610c8f8b8760028110611c9557634e487b7160e01b600052603260045260246000fd5b60200201518a90612f0c565b9750508080611caf90615049565b915050611a73565b506000611cc26111d6565b905060005b6002811015611dc857611d5e82858360028110611cf457634e487b7160e01b600052603260045260246000fd5b6020020151611d03888c612f82565b88601660008c8860028110611d2857634e487b7160e01b600052603260045260246000fd5b60200201516001600160a01b03166001600160a01b03168152602001908152602001600020612f8e90949392919063ffffffff16565b611db682858360028110611d8257634e487b7160e01b600052603260045260246000fd5b6020020151611d91888c612f82565b88601560008c8860028110611d2857634e487b7160e01b600052603260045260246000fd5b80611dc081615049565b915050611cc7565b505050505b60008411611e1d5760405162461bcd60e51b815260206004820152601e60248201527f535741505f4445504f5349545f524553554c545f4e4f545f454e4f55474800006044820152606401610ba4565b611e278585613221565b825160208085015160408051888152928301939093528183015290516001600160a01b0387169133917f8bab6aed5a508937051a144e61d6e61336834a66aaee250a00613ae6f744c4229181900360600190a3505060016006559094909350915050565b60003381611e998286612409565b905083811015611ef95760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610ba4565b611f06828686840361297e565b506001949350505050565b600033610a4c818585612b1d565b60408051600280825260608083018452926020830190803683370190505090507f000000000000000000000000000000000000000000000000000000000000000081600081518110611f8157634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b0316815250507f000000000000000000000000000000000000000000000000000000000000000081600181518110611fe357634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b03168152505090565b6000610a52600760009054906101000a90046001600160a01b03166001600160a01b03166321bacf286040518163ffffffff1660e01b815260040160206040518083038186803b15801561205957600080fd5b505afa15801561206d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120919190614c38565b6001600160a01b0384166000908152600b602090815260409182902082519182019092529054815290612cf6565b60006120ee8484846120d088610f4a565b6120d988611499565b6120e1612268565b6120e96110fa565b61348f565b949350505050565b61012c8111156121485760405162461bcd60e51b815260206004820152601a60248201527f474f565f44454341595f504552494f445f564f54455f484947480000000000006044820152606401610ba4565b603c8110156121995760405162461bcd60e51b815260206004820152601960248201527f474f565f44454341595f504552494f445f564f54455f4c4f57000000000000006044820152606401610ba4565b33600081815260136020908152604091829020825191820190925290548152610f4791906121c684612feb565b6121cf33611187565b600254600760009054906101000a90046001600160a01b03166001600160a01b0316639386e8b26040518163ffffffff1660e01b815260040160206040518083038186803b15801561222057600080fd5b505afa158015612234573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122589190614c38565b60109594939291906135d861306e565b604080516060810182526008546001600160681b038082168352600160681b8204166020830152600160d01b900465ffffffffffff169181019190915260009061114390613145565b6005546001600160a01b031633146122db5760405162461bcd60e51b8152600401610ba490614eaa565b600780546001600160a01b0319166001600160a01b038316179055604080516393028d8360e01b8152905130916393028d8391600480830192600092919082900301818387803b15801561232e57600080fd5b505af1158015612342573d6000803e3d6000fd5b50505050306001600160a01b0316636669302a6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561238157600080fd5b505af1158015612395573d6000803e3d6000fd5b50505050306001600160a01b031663f76d13b46040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156123d457600080fd5b505af11580156123e8573d6000803e3d6000fd5b5050505050565b60006123ff868686868633612434565b9695505050505050565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6000600260065414156124595760405162461bcd60e51b8152600401610ba490614edf565b6002600655600754604080516308bcf8b560e21b815290516001600160a01b03909216916322f3e2d491600480820192602092909190829003018186803b1580156124a357600080fd5b505afa1580156124b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124db9190614b1f565b61251f5760405162461bcd60e51b815260206004820152601560248201527429aba0a82fa320a1aa27a92cafa9a42aaa2227aba760591b6044820152606401610ba4565b6001600160a01b03871615612535576000612537565b845b341461257c5760405162461bcd60e51b8152602060048201526014602482015273535741505f57524f4e475f4d53475f56414c554560601b6044820152606401610ba4565b600060405180604001604052806125c66125a68b6001600160a01b03166001600160a01b03161590565b6125b15760006125b3565b345b6119ab6001600160a01b038d1630612e72565b81526020016125de6001600160a01b038a1630612e72565b81525090506000612602604051806040016040528060008152602001600081525090565b60006040518060400160405280612617612268565b81526020016126246110fa565b905290506126378b8b8b8b8a8987613622565b8094508197508295505050508a6001600160a01b0316866001600160a01b0316336001600160a01b03167fbd99c6719f088aa0abd9e7b7a4a635d1f931601e9f304b538dc42be25d8c65c68d878a886000015189602001518f6040516126d5969594939291906001600160a01b039687168152602081019590955260408501939093526060840191909152608083015290911660a082015260c00190565b60405180910390a46126ea83868987856138ae565b6001600160a01b038b166000908152601460205260408120805485929061271b9084906001600160801b0316614f2a565b82546101009290920a6001600160801b038181021990931691831602179091556001600160a01b038d16600090815260146020526040902080548893509091601091612770918591600160801b900416614f2a565b92506101000a8154816001600160801b0302191690836001600160801b031602179055505050505060016006819055509695505050505050565b6000816127d857507f0000000000000000000000000000000000000000000000000000000000000000919050565b816001141561280857507f0000000000000000000000000000000000000000000000000000000000000000919050565b60405162461bcd60e51b815260206004820152601960248201527f535741505f484156455f4f4e4c595f54574f5f544f4b454e53000000000000006044820152606401610ba4565b6005546001600160a01b0316331461287a5760405162461bcd60e51b8152600401610ba490614eaa565b6001600160a01b0381166128df5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610ba4565b610f47816131c0565b33600081815260136020908152604080832081518084018352905481528151808401835284905281519283019091529181526111859291906121c6565b6000600160681b821061297a5760405162461bcd60e51b815260206004820152601e60248201527f76616c756520646f6573206e6f742066697420696e20313034206269747300006044820152606401610ba4565b5090565b6001600160a01b0383166129e05760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610ba4565b6001600160a01b038216612a415760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610ba4565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6000612aaf8484612409565b90506000198114612b175781811015612b0a5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610ba4565b612b17848484840361297e565b50505050565b6001600160a01b038316612b815760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610ba4565b6001600160a01b038216612be35760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610ba4565b612bee838383613d99565b6001600160a01b03831660009081526020819052604090205481811015612c665760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610ba4565b6001600160a01b03808516600090815260208190526040808220858503905591851681529081208054849290612c9d908490614f55565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051612ce991815260200190565b60405180910390a3612b17565b815160009015612d15578251612d0e90600190614fd1565b9050610a52565b50919050565b6001600160a01b038216612d7b5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610ba4565b612d8782600083613d99565b6001600160a01b03821660009081526020819052604090205481811015612dfb5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610ba4565b6001600160a01b0383166000908152602081905260408120838303905560028054849290612e2a908490614fd1565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001612a96565b505050565b60006001600160a01b038316612e9357506001600160a01b03811631610a52565b6040516370a0823160e01b81526001600160a01b0383811660048301528416906370a082319060240160206040518083038186803b158015612ed457600080fd5b505afa158015612ee8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d0e9190614c38565b6000610a778284614fb2565b6000610a778284614f92565b8015612e6d576001600160a01b038316612f6e576040516001600160a01b0383169082156108fc029083906000818181858888f19350505050158015612b17573d6000803e3d6000fd5b612e6d6001600160a01b0384168383614089565b6000610a778284614f55565b6123e885612fe683610c8f612fa4826001613483565b604080518082019091528b546001600160d81b0381168252600160d81b900464ffffffffff166020820152611b33908990612fe0908d8d613089565b90612f0c565b6140ec565b60408051602081019091526000815260405180602001604052808360016130129190614f55565b905292915050565b6040805184815283151560208201529081018290526001600160a01b038516907fc00d9debcc1737a88e76a969557b14246f013c43c1328eab2cbac00c1714d0ca906060015b60405180910390a250505050565b61307f88888888888989898961412a565b5050505050505050565b6000806130ae84611a55876020015164ffffffffff164261348390919063ffffffff16565b905060006130bc8583613483565b90506123ff85610c8f6130cf8786612f0c565b8951611b33906001600160d81b031686612f0c565b6000818310156130f45781610a77565b5090919050565b6040805184815283151560208201529081018290526001600160a01b038516907f4ad9a834867d5460d12562e53fb43cfa76081110dbc58da81b8aeded6813639f90606001613060565b60008061316e62015180611a55856040015165ffffffffffff164261348390919063ffffffff16565b9050600061317f6201518083613483565b90506120ee62015180610c8f6131ab8588602001516001600160681b0316612f0c90919063ffffffff16565b8751611b33906001600160681b031686612f0c565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60008183106130f45781610a77565b6001600160a01b0382166132775760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610ba4565b61328360008383613d99565b80600260008282546132959190614f55565b90915550506001600160a01b038216600090815260208190526040812080548392906132c2908490614f55565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b8015612b17576001600160a01b03841661346e57803410156133705760405162461bcd60e51b815260206004820152601c60248201527f455243323048656c7065725f56414c55455f4e4f545f454e4f554748000000006044820152606401610ba4565b6001600160a01b03831633146133c85760405162461bcd60e51b815260206004820152601b60248201527f455243323048656c7065725f46524f4d5f4e4f545f53454e44455200000000006044820152606401610ba4565b6001600160a01b03821630146134205760405162461bcd60e51b815260206004820152601760248201527f455243323048656c7065725f544f5f4e4f545f544849530000000000000000006044820152606401610ba4565b80341115613469576001600160a01b0383166108fc61343f3484613483565b6040518115909202916000818181858888f19350505050158015613467573d6000803e3d6000fd5b505b612b17565b612b176001600160a01b038516848484614369565b6000610a778284614fd1565b6000866001600160a01b0316886001600160a01b031611156134af579596955b6000861180156134f057507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316886001600160a01b0316145b801561352d57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316876001600160a01b0316145b156135c957600061355461354d670de0b6b3a7640000610c8f8a88612f0c565b8890613483565b905060006135628783612f82565b9050600061357482610c8f858a612f0c565b905060006135976135858786612f0c565b6119ab670de0b6b3a764000086612f0c565b905060006135ad670de0b6b3a764000085612f0c565b90506135bd81610c8f8585612f0c565b955050505050506135cd565b5060005b979650505050505050565b6040805184815283151560208201529081018290526001600160a01b038516907fdb1350180a01d00beab06bdea8ddb5c0cacdce847a28cfaaeabf9075c26d5aa090606001613060565b600080613642604051806040016040528060008152602001600081525090565b600061364c6111d6565b86516001600160a01b038d166000908152601560209081526040918290208251808401909352546001600160d81b0381168352600160d81b900464ffffffffff16908201529192506136a091908390613089565b80835286516136af91906130e4565b82526020868101516001600160a01b038c166000908152601683526040908190208151808301909252546001600160d81b0381168252600160d81b900464ffffffffff169281019290925261370691908390613089565b602080840182905287015161371b9190613212565b60208301526137356001600160a01b038c1633308c61330c565b855161374e906119ab6001600160a01b038e1630612e72565b935061376f8b8b86856000015186602001518a600001518b6020015161348f565b92506000831180156137815750878310155b6137c65760405162461bcd60e51b81526020600482015260166024820152750a6ae82a0bea48aa6aa98a8be9c9ea8be8a9c9eaa8e960531b6044820152606401610ba4565b6137da6001600160a01b038b168885612f24565b8551825114613811578151613811906137f39086612f82565b6001600160a01b038d166000908152601560205260409020906140ec565b8560200151826020015114613851576020820151613851906138339085613483565b6001600160a01b038c166000908152601660205260409020906140ec565b85516001600160a01b038c1660009081526016602052604090206138769183906143a1565b6020808701516001600160a01b038c166000908152601590925260409091206138a09183906143a1565b509750975097945050505050565b600080600080600760009054906101000a90046001600160a01b03166001600160a01b03166323a65ab66040518163ffffffff1660e01b815260040160806040518083038186803b15801561390257600080fd5b505afa158015613916573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061393a9190614ce3565b935093509350935060008060006ec097ce7bc90715b34b9f100000000090506139828960000151610c8f61397b8f8d60000151612f8290919063ffffffff16565b8490612f0c565b60208a015190915061399b90610c8f61397b828f613483565b90506ec097ce7bc90715b34b9f1000000000811115613d2d576139bd816143dd565b905060006139e282610c8f6139da82670de0b6b3a7640000613483565b600254612fe0565b90506001600160a01b038b166139f9576000613a0f565b613a0f670de0b6b3a7640000610c8f838b612f0c565b93506001600160a01b038616613a26576000613a3c565b613a3c670de0b6b3a7640000610c8f838a612f0c565b92506001600160a01b038516613a71578315613a5c57613a5c8b85613221565b8215613a6c57613a6c8684613221565b613d2b565b6000841180613a805750600083115b15613d2b576000808411613a95576000613a98565b60015b60008611613aa7576000613aaa565b60015b613ab49190614f6d565b60ff16905060008167ffffffffffffffff811115613ae257634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015613b0b578160200160208202803683370190505b50905060008267ffffffffffffffff811115613b3757634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015613b60578160200160208202803683370190505b5090508d82600081518110613b8557634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b0316815250508681600081518110613bc757634e487b7160e01b600052603260045260246000fd5b60209081029190910101528515613c53578882613be5600186614fd1565b81518110613c0357634e487b7160e01b600052603260045260246000fd5b6001600160a01b03909216602092830291909101909101528581613c28600186614fd1565b81518110613c4657634e487b7160e01b600052603260045260246000fd5b6020026020010181815250505b60405163024c5d4f60e21b81526001600160a01b03891690630931753c90613c819085908590600401614d99565b600060405180830381600087803b158015613c9b57600080fd5b505af1925050508015613cac575060015b613d14577f08c379a0afcc32b1a39302f7cb8073359698411ab5fd6e3edb2c02c0b5fba8aa604051613d0790602080825260159082015274155c19185d194814995dd85c991cc811985a5b1959605a1b604082015260600190565b60405180910390a1613d27565b613d2788613d228989612f82565b613221565b5050505b505b88516020808b01518a518b83015160408051958652938501929092528383015260608301526080820185905260a08201849052517f2a368c7f33bb86e2d999940a3989d849031aff29b750f67947e6b8e8c3d2ffd69181900360c00190a1505050505050505050505050565b816001600160a01b0316836001600160a01b03161415613db857505050565b6007546001600160a01b039081169060009085161580613e4c5750604051633b90b9bf60e01b81526001600160a01b038681166004830152831690633b90b9bf9060240160206040518083038186803b158015613e1457600080fd5b505afa158015613e28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e4c9190614b1f565b15905060006001600160a01b0385161580613edb5750604051633b90b9bf60e01b81526001600160a01b038681166004830152841690633b90b9bf9060240160206040518083038186803b158015613ea357600080fd5b505afa158015613eb7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613edb9190614b1f565b15905081158015613eea575080155b15613ef757505050505050565b60006001600160a01b038716613f0e576000613f17565b613f1787611187565b905060006001600160a01b038716613f30576000613f39565b613f3987611187565b90506000613f7b6001600160a01b03891615613f56576000613f58565b875b6119ab6001600160a01b038c1615613f71576000613f73565b895b600254611b33565b905060006040518061010001604052808b6001600160a01b031681526020018a6001600160a01b03168152602001871515815260200186151581526020018981526020018581526020018481526020018381525090506000806000896001600160a01b031663edb7a6fa6040518163ffffffff1660e01b815260040160606040518083038186803b15801561400f57600080fd5b505afa158015614023573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140479190614d2d565b92509250925061405c848461301a6008614454565b61406b84836130fb600c614454565b61407a84826135d86010614454565b50505050505050505050505050565b6040516001600160a01b038316602482015260448101829052612e6d90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526145a1565b6140f581614673565b6140fe426146c8565b6001600160d81b039190911664ffffffffff909116600160d81b026001600160d81b0319161790915550565b600189015460028a01548190806141408b511590565b156141565761414f818a613483565b9050614177565b61417461416d6141668d89612cf6565b8b90612f0c565b8490613483565b92505b895161418e576141878189612f82565b90506141af565b6141ac6141a561419e8c89612cf6565b8a90612f0c565b8490612f82565b92505b8383146141be5760018d018390555b8181146141cd5760028d018190555b600087156141f2576141ed88610c8f6141e6858b612f0c565b8790612f82565b6141f4565b865b905060008e6000016040518060600160405290816000820160009054906101000a90046001600160681b03166001600160681b03166001600160681b0316815260200160008201600d9054906101000a90046001600160681b03166001600160681b03166001600160681b0316815260200160008201601a9054906101000a900465ffffffffffff1665ffffffffffff1665ffffffffffff1681525050905080602001516001600160681b03168214614324578e6142b96142b483613145565b612925565b6142c284612925565b6142cb4261471f565b83546001600160681b039384166cffffffffffffffffffffffffff19938516600160681b026cffffffffffffffffffffffffff60681b1965ffffffffffff909416600160d01b0293909316949091169390931717161790555b50508a518a511461434e576001600160a01b038c16600090815260038e01602052604090208a5190555b61407a8c61435c8c89612cf6565b8c51158b8963ffffffff16565b6040516001600160a01b0380851660248301528316604482015260648101829052612b179085906323b872dd60e01b906084016140b5565b6040805180820190915283546001600160d81b0381168252600160d81b900464ffffffffff166020820152612e6d908490612fe6908585613089565b6000600382111561443e578160006143f6600283614f92565b614401906001614f55565b90505b818110156144375790508060028161441c8187614f92565b6144269190614f55565b6144309190614f92565b9050614404565b5092915050565b811561444c57506001919050565b506000919050565b83516001600160a01b03908116600090815260038301602081815260408084208151808401835290548152828a0151909516845291815291819020815192830190915254815281511580156144a857508051155b80156144b5575085604001515b80156144c2575085606001515b156145345785516144fd906144d78488612cf6565b60016144f48a608001518b60a0015161348390919063ffffffff16565b8863ffffffff16565b602086015161452d906145108388612cf6565b60016144f48a608001518b60c00151612f8290919063ffffffff16565b5050612b17565b85604001511561456e57855160a0870151608088015161456e9291859161455c908290613483565b60e08b01518894939291908b8b614777565b85606001511561459957602086015160c087015160808801516145999291849161455c908290612f82565b505050505050565b60006145f6826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166147af9092919063ffffffff16565b805190915015612e6d57808060200190518101906146149190614b1f565b612e6d5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610ba4565b6000600160d81b821061297a5760405162461bcd60e51b815260206004820152601e60248201527f76616c756520646f6573206e6f742066697420696e20323136206269747300006044820152606401610ba4565b600065010000000000821061297a5760405162461bcd60e51b815260206004820152601d60248201527f76616c756520646f6573206e6f742066697420696e20343020626974730000006044820152606401610ba4565b60006601000000000000821061297a5760405162461bcd60e51b815260206004820152601d60248201527f76616c756520646f6573206e6f742066697420696e20343820626974730000006044820152606401610ba4565b61307f888888871561478957896147a5565b6040805160208082018352600091829052825190810190925281525b898989898961412a565b60606120ee8484600085856001600160a01b0385163b6148115760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610ba4565b600080866001600160a01b0316858760405161482d9190614d7d565b60006040518083038185875af1925050503d806000811461486a576040519150601f19603f3d011682016040523d82523d6000602084013e61486f565b606091505b50915091506135cd82828660608315614889575081610a77565b8251156148995782518084602001fd5b8160405162461bcd60e51b8152600401610ba49190614e77565b60405180604001604052806002906020820280368337509192915050565b600082601f8301126148e1578081fd5b6040516040810181811067ffffffffffffffff821117156149045761490461507a565b806040525080838560408601111561491a578384fd5b835b600281101561493b57813583526020928301929091019060010161491c565b509195945050505050565b600082601f830112614956578081fd5b8135602067ffffffffffffffff808311156149735761497361507a565b8260051b604051601f19603f830116810181811084821117156149985761499861507a565b604052848152838101925086840182880185018910156149b6578687fd5b8692505b858310156149d85780358452928401926001929092019184016149ba565b50979650505050505050565b6000602082840312156149f5578081fd5b8135610a7781615090565b60008060408385031215614a12578081fd5b8235614a1d81615090565b91506020830135614a2d81615090565b809150509250929050565b600080600060608486031215614a4c578081fd5b8335614a5781615090565b92506020840135614a6781615090565b929592945050506040919091013590565b60008060408385031215614a8a578182fd5b8235614a9581615090565b946020939093013593505050565b60008060808385031215614ab5578182fd5b614abf84846148d1565b9150614ace84604085016148d1565b90509250929050565b600080600060a08486031215614aeb578283fd5b614af585856148d1565b9250614b0485604086016148d1565b91506080840135614b1481615090565b809150509250925092565b600060208284031215614b30578081fd5b81518015158114610a77578182fd5b600080600060608486031215614a4c578283fd5b600080600080600060a08688031215614b6a578081fd5b8535614b7581615090565b94506020860135614b8581615090565b935060408601359250606086013591506080860135614ba381615090565b809150509295509295909350565b60008060008060008060c08789031215614bc9578384fd5b8635614bd481615090565b95506020870135614be481615090565b945060408701359350606087013592506080870135614c0281615090565b915060a0870135614c1281615090565b809150509295509295509295565b600060208284031215614c31578081fd5b5035919050565b600060208284031215614c49578081fd5b5051919050565b60008060408385031215614c62578182fd5b82359150602083013567ffffffffffffffff811115614c7f578182fd5b614c8b85828601614946565b9150509250929050565b600080600060608486031215614ca9578081fd5b83359250602084013567ffffffffffffffff811115614cc6578182fd5b614cd286828701614946565b9250506040840135614b1481615090565b60008060008060808587031215614cf8578182fd5b84519350602085015192506040850151614d1181615090565b6060860151909250614d2281615090565b939692955090935050565b600080600060608486031215614d41578081fd5b8351925060208401519150604084015190509250925092565b8060005b6002811015612b17578151845260209384019390910190600101614d5e565b60008251614d8f818460208701614fe8565b9190910192915050565b604080825283519082018190526000906020906060840190828701845b82811015614ddb5781516001600160a01b031684529284019290840190600101614db6565b50505083810382850152845180825285830191830190845b81811015614e0f57835183529284019291840191600101614df3565b5090979650505050505050565b6020808252825182820181905260009190848201906040850190845b81811015614e5d5783516001600160a01b031683529284019291840191600101614e38565b50909695505050505050565b60408101610a528284614d5a565b6020815260008251806020840152614e96816040850160208701614fe8565b601f01601f19169190910160400192915050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b82815260608101610a776020830184614d5a565b60006001600160801b03808316818516808303821115614f4c57614f4c615064565b01949350505050565b60008219821115614f6857614f68615064565b500190565b600060ff821660ff84168060ff03821115614f8a57614f8a615064565b019392505050565b600082614fad57634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615614fcc57614fcc615064565b500290565b600082821015614fe357614fe3615064565b500390565b60005b83811015615003578181015183820152602001614feb565b83811115612b175750506000910152565b600181811c9082168061502857607f821691505b60208210811415612d1557634e487b7160e01b600052602260045260246000fd5b600060001982141561505d5761505d615064565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610f4757600080fdfea26469706673582212209fee560d09fe611caadfc501723115e2a457326498f152e977b7bac3081a323164736f6c63430008040033a264697066735822122047cc9bf896190d33718e6cee088c1cf6136a9dcc97c7676f8ed5875a04e12d7e64736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c8063b92440b014610030575b600080fd5b61004361003e366004610160565b61005f565b6040516001600160a01b03909116815260200160405180910390f35b6000878787878787336040516100749061010b565b610084979695949392919061022f565b604051809103906000f0801580156100a0573d6000803e3d6000fd5b5060405163f2fde38b60e01b81526001600160a01b0384811660048301529192509082169063f2fde38b90602401600060405180830381600087803b1580156100e857600080fd5b505af11580156100fc573d6000803e3d6000fd5b50505050979650505050505050565b6157d7806200029e83390190565b60008083601f84011261012a578182fd5b50813567ffffffffffffffff811115610141578182fd5b60208301915083602082850101111561015957600080fd5b9250929050565b600080600080600080600060a0888a03121561017a578283fd5b873561018581610285565b9650602088013561019581610285565b9550604088013567ffffffffffffffff808211156101b1578485fd5b6101bd8b838c01610119565b909750955060608a01359150808211156101d5578485fd5b506101e28a828b01610119565b90945092505060808801356101f681610285565b8091505092959891949750929550565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b600060018060a01b03808a168352808916602084015260a0604084015261025a60a08401888a610206565b838103606085015261026d818789610206565b92505080841660808401525098975050505050505050565b6001600160a01b038116811461029a57600080fd5b5056fe60c06040523480156200001157600080fd5b50604051620057d7380380620057d7833981016040819052620000349162000540565b80838381600390805190602001906200004f929190620003f1565b50805162000065906004906020840190620003f1565b505050620000826200007c6200034060201b60201c565b62000344565b6001600655600780546001600160a01b0319166001600160a01b0383169081179091556040805163043759e560e31b815290516200012d92916321bacf28916004808301926020929190829003018186803b158015620000e157600080fd5b505afa158015620000f6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200011c9190620005e9565b6200039660201b620029251760201c565b6008600001600001600d6101000a8154816001600160681b0302191690836001600160681b0316021790555062000197816001600160a01b031663b975d0bb6040518163ffffffff1660e01b815260040160206040518083038186803b158015620000e157600080fd5b600c600001600001600d6101000a8154816001600160681b0302191690836001600160681b0316021790555062000201816001600160a01b0316639386e8b26040518163ffffffff1660e01b815260040160206040518083038186803b158015620000e157600080fd5b601080546001600160681b0392909216600160681b02600160681b600160d01b0319909216919091179055508251620002735760405162461bcd60e51b815260206004820152600f60248201526e535741505f4e414d455f454d50545960881b60448201526064015b60405180910390fd5b6000825111620002ba5760405162461bcd60e51b8152602060048201526011602482015270535741505f53594d424f4c5f454d50545960781b60448201526064016200026a565b836001600160a01b0316856001600160a01b031614156200031e5760405162461bcd60e51b815260206004820152601460248201527f535741505f54574f5f544f4b454e535f53414d4500000000000000000000000060448201526064016200026a565b5050506001600160601b0319606092831b8116608052911b1660a0526200066e565b3390565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000600160681b8210620003ed5760405162461bcd60e51b815260206004820152601e60248201527f76616c756520646f6573206e6f742066697420696e203130342062697473000060448201526064016200026a565b5090565b828054620003ff9062000602565b90600052602060002090601f0160209004810192826200042357600085556200046e565b82601f106200043e57805160ff19168380011785556200046e565b828001600101855582156200046e579182015b828111156200046e57825182559160200191906001019062000451565b50620003ed9291505b80821115620003ed576000815560010162000477565b600082601f8301126200049e578081fd5b81516001600160401b0380821115620004bb57620004bb6200063f565b604051601f8301601f19908116603f01168101908282118183101715620004e657620004e66200063f565b8160405283815260209250868385880101111562000502578485fd5b8491505b8382101562000525578582018301518183018401529082019062000506565b838211156200053657848385830101525b9695505050505050565b600080600080600060a0868803121562000558578081fd5b8551620005658162000655565b6020870151909550620005788162000655565b60408701519094506001600160401b038082111562000595578283fd5b620005a389838a016200048d565b94506060880151915080821115620005b9578283fd5b50620005c8888289016200048d565b9250506080860151620005db8162000655565b809150509295509295909350565b600060208284031215620005fb578081fd5b5051919050565b600181811c908216806200061757607f821691505b602082108114156200063957634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146200066b57600080fd5b50565b60805160601c60a05160601c6150db620006fc6000396000818161084e01528181610beb015281816112b7015281816113830152818161164201528181611fa3015281816127e401526134f901526000818161030501528181610bc601528181611280015281816113010152818161161d01528181611f41015281816127b401526134bc01526150db6000f3fe6080604052600436106102935760003560e01c806393028d831161015a578063cad07066116100c1578063e331d0391161007a578063e331d039146108c3578063e4b50cb8146108d6578063ee5d1859146108f6578063f2fde38b1461093c578063f3bf09bb1461095c578063f76d13b41461099757600080fd5b8063cad0706614610807578063ced72f8714610827578063d21220a71461083c578063d2fd9eba14610870578063d5bcb9b514610890578063dd62ed3e146108a357600080fd5b8063a9059cbb11610113578063a9059cbb146106b9578063aa6ca808146106d9578063ac9d6f95146106fb578063b1ec4c4014610766578063bd10cd80146107c7578063c515ee23146107e757600080fd5b806393028d831461061c578063936f0a151461063157806395d89b41146106515780639ab7fdd6146106665780639ea5ce0a14610686578063a457c2d71461069957600080fd5b8063487ca261116101fe57806370a08231116101b757806370a0823114610574578063715018a614610594578063728c769a146105a957806378e3214f146105be5780638da5cb5b146105de578063907e4f36146105fc57600080fd5b8063487ca261146104c85780634b4c9ce5146104ea5780635915d8061461050a5780635a08c2611461052a5780636515aa291461054a5780636669302a1461055f57600080fd5b806323b872dd1161025057806323b872dd146103fe5780632a519ec81461041e5780633049105d1461043e578063313ce5671461045f578063395093511461047b5780633c6216a61461049b57600080fd5b806306fdde0314610298578063095ea7b3146102c35780630dfe1681146102f357806318160ddd1461033f5780631a08b5551461035e5780631f495dda146103c3575b600080fd5b3480156102a457600080fd5b506102ad6109ac565b6040516102ba9190614e77565b60405180910390f35b3480156102cf57600080fd5b506102e36102de366004614a78565b610a3e565b60405190151581526020016102ba565b3480156102ff57600080fd5b506103277f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016102ba565b34801561034b57600080fd5b506002545b6040519081526020016102ba565b34801561036a57600080fd5b506008546001600160681b0380821691600160681b810490911690600160d01b900465ffffffffffff165b604080516001600160681b03948516815293909216602084015265ffffffffffff16908201526060016102ba565b3480156103cf57600080fd5b506010546001600160681b0380821691600160681b810490911690600160d01b900465ffffffffffff16610395565b34801561040a57600080fd5b506102e3610419366004614a38565b610a58565b34801561042a57600080fd5b506103506104393660046149e4565b610a7e565b61045161044c366004614aa3565b610b37565b6040516102ba929190614f16565b34801561046b57600080fd5b50604051601281526020016102ba565b34801561048757600080fd5b506102e3610496366004614a78565b610b57565b3480156104a757600080fd5b506104bb6104b6366004614c95565b610b79565b6040516102ba9190614e69565b3480156104d457600080fd5b506104e86104e3366004614c20565b610e2d565b005b3480156104f657600080fd5b506103506105053660046149e4565b610f4a565b34801561051657600080fd5b506104bb610525366004614c50565b610fc0565b34801561053657600080fd5b506104e8610545366004614c20565b610fd3565b34801561055657600080fd5b506103506110fa565b34801561056b57600080fd5b506104e8611148565b34801561058057600080fd5b5061035061058f3660046149e4565b611187565b3480156105a057600080fd5b506104e86111a2565b3480156105b557600080fd5b506103506111d6565b3480156105ca57600080fd5b506104e86105d9366004614a78565b61121f565b3480156105ea57600080fd5b506005546001600160a01b0316610327565b34801561060857600080fd5b50600754610327906001600160a01b031681565b34801561062857600080fd5b506104e861145c565b34801561063d57600080fd5b5061035061064c3660046149e4565b611499565b34801561065d57600080fd5b506102ad61150f565b34801561067257600080fd5b506103506106813660046149e4565b61151e565b610451610694366004614ad7565b6115d7565b3480156106a557600080fd5b506102e36106b4366004614a78565b611e8b565b3480156106c557600080fd5b506102e36106d4366004614a78565b611f11565b3480156106e557600080fd5b506106ee611f1f565b6040516102ba9190614e1c565b34801561070757600080fd5b506107416107163660046149e4565b6016602052600090815260409020546001600160d81b03811690600160d81b900464ffffffffff1682565b604080516001600160d81b03909316835264ffffffffff9091166020830152016102ba565b34801561077257600080fd5b506107a76107813660046149e4565b6014602052600090815260409020546001600160801b0380821691600160801b90041682565b604080516001600160801b039384168152929091166020830152016102ba565b3480156107d357600080fd5b506103506107e23660046149e4565b612006565b3480156107f357600080fd5b50610350610802366004614b3f565b6120bf565b34801561081357600080fd5b506104e8610822366004614c20565b6120f6565b34801561083357600080fd5b50610350612268565b34801561084857600080fd5b506103277f000000000000000000000000000000000000000000000000000000000000000081565b34801561087c57600080fd5b506104e861088b3660046149e4565b6122b1565b61035061089e366004614b53565b6123ef565b3480156108af57600080fd5b506103506108be366004614a00565b612409565b6103506108d1366004614bb1565b612434565b3480156108e257600080fd5b506103276108f1366004614c20565b6127aa565b34801561090257600080fd5b506107416109113660046149e4565b6015602052600090815260409020546001600160d81b03811690600160d81b900464ffffffffff1682565b34801561094857600080fd5b506104e86109573660046149e4565b612850565b34801561096857600080fd5b50600c546001600160681b0380821691600160681b810490911690600160d01b900465ffffffffffff16610395565b3480156109a357600080fd5b506104e86128e8565b6060600380546109bb90615014565b80601f01602080910402602001604051908101604052809291908181526020018280546109e790615014565b8015610a345780601f10610a0957610100808354040283529160200191610a34565b820191906000526020600020905b815481529060010190602001808311610a1757829003601f168201915b5050505050905090565b600033610a4c81858561297e565b60019150505b92915050565b600033610a66858285612aa3565b610a71858585612b1d565b60019150505b9392505050565b6000610a52600760009054906101000a90046001600160a01b03166001600160a01b0316639386e8b26040518163ffffffff1660e01b815260040160206040518083038186803b158015610ad157600080fd5b505afa158015610ae5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b099190614c38565b6001600160a01b03841660009081526013602090815260409182902082519182019092529054815290612cf6565b6000610b416148b3565b610b4c8484336115d7565b915091509250929050565b600033610a4c818585610b6a8383612409565b610b749190614f55565b61297e565b610b816148b3565b60026006541415610bad5760405162461bcd60e51b8152600401610ba490614edf565b60405180910390fd5b6002600655604080518082019091526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811682527f00000000000000000000000000000000000000000000000000000000000000001660208201526000610c1b60025490565b90506000610c276111d6565b9050610c333388612d1b565b60005b6002811015610dca576000848260028110610c6157634e487b7160e01b600052603260045260246000fd5b602002015190506000610c7d6001600160a01b03831630612e72565b90506000610c9586610c8f848e612f0c565b90612f18565b9050610cab6001600160a01b0384168a83612f24565b80888560028110610ccc57634e487b7160e01b600052603260045260246000fd5b6020020152895184101580610d085750898481518110610cfc57634e487b7160e01b600052603260045260246000fd5b60200260200101518110155b610d545760405162461bcd60e51b815260206004820152601f60248201527f535741505f57495448445241575f524553554c545f4e4f545f454e4f554748006044820152606401610ba4565b610d848583610d63898f612f82565b6001600160a01b03871660009081526016602052604090209291908a612f8e565b610db48583610d93898f612f82565b6001600160a01b03871660009081526015602052604090209291908a612f8e565b5050508080610dc290615049565b915050610c36565b508351602080860151604080518b8152928301939093528183015290516001600160a01b0387169133917f3cae9923fd3c2f468aa25a8ef687923e37f957459557c0380fd06526c0b8cdbc9181900360600190a350506001600655509392505050565b662386f26fc10000811115610e785760405162461bcd60e51b815260206004820152601160248201527008e9eacbe8c8a8abeac9ea88abe90928e9607b1b6044820152606401610ba4565b336000818152600b6020908152604091829020825191820190925290548152610f479190610ea584612feb565b610eae33611187565b600254600760009054906101000a90046001600160a01b03166001600160a01b03166321bacf286040518163ffffffff1660e01b815260040160206040518083038186803b158015610eff57600080fd5b505afa158015610f13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f379190614c38565b600895949392919061301a61306e565b50565b600080610f606001600160a01b03841630612e72565b9050610a77610fba610f706111d6565b6001600160a01b0386166000908152601560209081526040918290208251808401909352546001600160d81b0381168352600160d81b900464ffffffffff16908201529084613089565b826130e4565b610fc86148b3565b610a77838333610b79565b670de0b6b3a764000081111561102b5760405162461bcd60e51b815260206004820152601a60248201527f474f565f534c4950504147455f4645455f564f54455f484947480000000000006044820152606401610ba4565b336000818152600f6020908152604091829020825191820190925290548152610f47919061105884612feb565b61106133611187565b600254600760009054906101000a90046001600160a01b03166001600160a01b031663b975d0bb6040518163ffffffff1660e01b815260040160206040518083038186803b1580156110b257600080fd5b505afa1580156110c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ea9190614c38565b600c9594939291906130fb61306e565b60408051606081018252600c546001600160681b038082168352600160681b8204166020830152600160d01b900465ffffffffffff169181019190915260009061114390613145565b905090565b336000818152600f602090815260408083208151808401835290548152815180840183528490528151928301909152918152611185929190611058565b565b6001600160a01b031660009081526020819052604090205490565b6005546001600160a01b031633146111cc5760405162461bcd60e51b8152600401610ba490614eaa565b61118560006131c0565b604080516060810182526010546001600160681b038082168352600160681b8204166020830152600160d01b900465ffffffffffff169181019190915260009061114390613145565b600260065414156112425760405162461bcd60e51b8152600401610ba490614edf565b60026006556005546001600160a01b031633146112715760405162461bcd60e51b8152600401610ba490614eaa565b60006112a66001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630612e72565b905060006112dd6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630612e72565b90506112f36001600160a01b0385163385612f24565b816113276001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630612e72565b10156113755760405162461bcd60e51b815260206004820152601860248201527f535741505f5245534355455f44454e4945445f42414c5f3000000000000000006044820152606401610ba4565b806113a96001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630612e72565b10156113f75760405162461bcd60e51b815260206004820152601860248201527f535741505f5245534355455f44454e4945445f42414c5f3100000000000000006044820152606401610ba4565b6103e861140330611187565b10156114515760405162461bcd60e51b815260206004820152601e60248201527f535741505f5245534355455f44454e4945445f424153455f535550504c5900006044820152606401610ba4565b505060016006555050565b336000818152600b602090815260408083208151808401835290548152815180840183528490528151928301909152918152611185929190610ea5565b6000806114af6001600160a01b03841630612e72565b9050610a776115096114bf6111d6565b6001600160a01b0386166000908152601660209081526040918290208251808401909352546001600160d81b0381168352600160d81b900464ffffffffff16908201529084613089565b82613212565b6060600480546109bb90615014565b6000610a52600760009054906101000a90046001600160a01b03166001600160a01b031663b975d0bb6040518163ffffffff1660e01b815260040160206040518083038186803b15801561157157600080fd5b505afa158015611585573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115a99190614c38565b6001600160a01b0384166000908152600f602090815260409182902082519182019092529054815290612cf6565b60006115e16148b3565b600260065414156116045760405162461bcd60e51b8152600401610ba490614edf565b6002600655604080518082019091526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811682527f00000000000000000000000000000000000000000000000000000000000000001660208201526116808160005b60200201516001600160a01b03161590565b6116a45761168f81600161166e565b61169a5760006116a7565b60208601516116a7565b85515b34146116f55760405162461bcd60e51b815260206004820152601c60248201527f535741505f4445504f5349545f57524f4e475f4d53475f56414c5545000000006044820152606401610ba4565b600061170060025490565b90508061192c576117146103e86063612f0c565b9350611722306103e8613221565b60005b60028110156119265761175c8589836002811061175257634e487b7160e01b600052603260045260246000fd5b60200201516130e4565b9450600088826002811061178057634e487b7160e01b600052603260045260246000fd5b6020020151116117d25760405162461bcd60e51b815260206004820152601d60248201527f535741505f4445504f5349545f414d4f554e545f49535f5a45524f5f300000006044820152606401610ba4565b8681600281106117f257634e487b7160e01b600052603260045260246000fd5b602002015188826002811061181757634e487b7160e01b600052603260045260246000fd5b6020020151101561186a5760405162461bcd60e51b815260206004820152601d60248201527f535741505f4445504f5349545f4d494e5f414d4f554e545f4c4f575f300000006044820152606401610ba4565b6118ca33308a846002811061188f57634e487b7160e01b600052603260045260246000fd5b60200201518685600281106118b457634e487b7160e01b600052603260045260246000fd5b60200201516001600160a01b031692919061330c565b8781600281106118ea57634e487b7160e01b600052603260045260246000fd5b602002015184826002811061190f57634e487b7160e01b600052603260045260246000fd5b60200201528061191e81615049565b915050611725565b50611dcd565b6119346148b3565b60005b60028110156119e8576119b161196685836002811061166e57634e487b7160e01b600052603260045260246000fd5b611971576000611973565b345b6119ab3087856002811061199757634e487b7160e01b600052603260045260246000fd5b60200201516001600160a01b031690612e72565b90613483565b8282600281106119d157634e487b7160e01b600052603260045260246000fd5b6020020152806119e081615049565b915050611937565b50600019945060005b6002811015611a6e57611a5a86611a55848460028110611a2157634e487b7160e01b600052603260045260246000fd5b6020020151610c8f8d8660028110611a4957634e487b7160e01b600052603260045260246000fd5b60200201518890612f0c565b613212565b955080611a6681615049565b9150506119f1565b508460005b6002811015611cb75760008a8260028110611a9e57634e487b7160e01b600052603260045260246000fd5b602002015111611af05760405162461bcd60e51b815260206004820152601d60248201527f535741505f4445504f5349545f414d4f554e545f49535f5a45524f5f310000006044820152606401610ba4565b6000611b3985610c8f611b04600183614fd1565b611b3387898860028110611b2857634e487b7160e01b600052603260045260246000fd5b602002015190612f0c565b90612f82565b9050898260028110611b5b57634e487b7160e01b600052603260045260246000fd5b6020020151811015611baf5760405162461bcd60e51b815260206004820152601d60248201527f535741505f4445504f5349545f4d494e5f414d4f554e545f4c4f575f310000006044820152606401610ba4565b611bd53330838986600281106118b457634e487b7160e01b600052603260045260246000fd5b611c21848360028110611bf857634e487b7160e01b600052603260045260246000fd5b60200201516119ab3089866002811061199757634e487b7160e01b600052603260045260246000fd5b878360028110611c4157634e487b7160e01b600052603260045260246000fd5b6020020152611ca188611a55868560028110611c6d57634e487b7160e01b600052603260045260246000fd5b6020020151610c8f8b8760028110611c9557634e487b7160e01b600052603260045260246000fd5b60200201518a90612f0c565b9750508080611caf90615049565b915050611a73565b506000611cc26111d6565b905060005b6002811015611dc857611d5e82858360028110611cf457634e487b7160e01b600052603260045260246000fd5b6020020151611d03888c612f82565b88601660008c8860028110611d2857634e487b7160e01b600052603260045260246000fd5b60200201516001600160a01b03166001600160a01b03168152602001908152602001600020612f8e90949392919063ffffffff16565b611db682858360028110611d8257634e487b7160e01b600052603260045260246000fd5b6020020151611d91888c612f82565b88601560008c8860028110611d2857634e487b7160e01b600052603260045260246000fd5b80611dc081615049565b915050611cc7565b505050505b60008411611e1d5760405162461bcd60e51b815260206004820152601e60248201527f535741505f4445504f5349545f524553554c545f4e4f545f454e4f55474800006044820152606401610ba4565b611e278585613221565b825160208085015160408051888152928301939093528183015290516001600160a01b0387169133917f8bab6aed5a508937051a144e61d6e61336834a66aaee250a00613ae6f744c4229181900360600190a3505060016006559094909350915050565b60003381611e998286612409565b905083811015611ef95760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610ba4565b611f06828686840361297e565b506001949350505050565b600033610a4c818585612b1d565b60408051600280825260608083018452926020830190803683370190505090507f000000000000000000000000000000000000000000000000000000000000000081600081518110611f8157634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b0316815250507f000000000000000000000000000000000000000000000000000000000000000081600181518110611fe357634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b03168152505090565b6000610a52600760009054906101000a90046001600160a01b03166001600160a01b03166321bacf286040518163ffffffff1660e01b815260040160206040518083038186803b15801561205957600080fd5b505afa15801561206d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120919190614c38565b6001600160a01b0384166000908152600b602090815260409182902082519182019092529054815290612cf6565b60006120ee8484846120d088610f4a565b6120d988611499565b6120e1612268565b6120e96110fa565b61348f565b949350505050565b61012c8111156121485760405162461bcd60e51b815260206004820152601a60248201527f474f565f44454341595f504552494f445f564f54455f484947480000000000006044820152606401610ba4565b603c8110156121995760405162461bcd60e51b815260206004820152601960248201527f474f565f44454341595f504552494f445f564f54455f4c4f57000000000000006044820152606401610ba4565b33600081815260136020908152604091829020825191820190925290548152610f4791906121c684612feb565b6121cf33611187565b600254600760009054906101000a90046001600160a01b03166001600160a01b0316639386e8b26040518163ffffffff1660e01b815260040160206040518083038186803b15801561222057600080fd5b505afa158015612234573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122589190614c38565b60109594939291906135d861306e565b604080516060810182526008546001600160681b038082168352600160681b8204166020830152600160d01b900465ffffffffffff169181019190915260009061114390613145565b6005546001600160a01b031633146122db5760405162461bcd60e51b8152600401610ba490614eaa565b600780546001600160a01b0319166001600160a01b038316179055604080516393028d8360e01b8152905130916393028d8391600480830192600092919082900301818387803b15801561232e57600080fd5b505af1158015612342573d6000803e3d6000fd5b50505050306001600160a01b0316636669302a6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561238157600080fd5b505af1158015612395573d6000803e3d6000fd5b50505050306001600160a01b031663f76d13b46040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156123d457600080fd5b505af11580156123e8573d6000803e3d6000fd5b5050505050565b60006123ff868686868633612434565b9695505050505050565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6000600260065414156124595760405162461bcd60e51b8152600401610ba490614edf565b6002600655600754604080516308bcf8b560e21b815290516001600160a01b03909216916322f3e2d491600480820192602092909190829003018186803b1580156124a357600080fd5b505afa1580156124b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124db9190614b1f565b61251f5760405162461bcd60e51b815260206004820152601560248201527429aba0a82fa320a1aa27a92cafa9a42aaa2227aba760591b6044820152606401610ba4565b6001600160a01b03871615612535576000612537565b845b341461257c5760405162461bcd60e51b8152602060048201526014602482015273535741505f57524f4e475f4d53475f56414c554560601b6044820152606401610ba4565b600060405180604001604052806125c66125a68b6001600160a01b03166001600160a01b03161590565b6125b15760006125b3565b345b6119ab6001600160a01b038d1630612e72565b81526020016125de6001600160a01b038a1630612e72565b81525090506000612602604051806040016040528060008152602001600081525090565b60006040518060400160405280612617612268565b81526020016126246110fa565b905290506126378b8b8b8b8a8987613622565b8094508197508295505050508a6001600160a01b0316866001600160a01b0316336001600160a01b03167fbd99c6719f088aa0abd9e7b7a4a635d1f931601e9f304b538dc42be25d8c65c68d878a886000015189602001518f6040516126d5969594939291906001600160a01b039687168152602081019590955260408501939093526060840191909152608083015290911660a082015260c00190565b60405180910390a46126ea83868987856138ae565b6001600160a01b038b166000908152601460205260408120805485929061271b9084906001600160801b0316614f2a565b82546101009290920a6001600160801b038181021990931691831602179091556001600160a01b038d16600090815260146020526040902080548893509091601091612770918591600160801b900416614f2a565b92506101000a8154816001600160801b0302191690836001600160801b031602179055505050505060016006819055509695505050505050565b6000816127d857507f0000000000000000000000000000000000000000000000000000000000000000919050565b816001141561280857507f0000000000000000000000000000000000000000000000000000000000000000919050565b60405162461bcd60e51b815260206004820152601960248201527f535741505f484156455f4f4e4c595f54574f5f544f4b454e53000000000000006044820152606401610ba4565b6005546001600160a01b0316331461287a5760405162461bcd60e51b8152600401610ba490614eaa565b6001600160a01b0381166128df5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610ba4565b610f47816131c0565b33600081815260136020908152604080832081518084018352905481528151808401835284905281519283019091529181526111859291906121c6565b6000600160681b821061297a5760405162461bcd60e51b815260206004820152601e60248201527f76616c756520646f6573206e6f742066697420696e20313034206269747300006044820152606401610ba4565b5090565b6001600160a01b0383166129e05760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610ba4565b6001600160a01b038216612a415760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610ba4565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6000612aaf8484612409565b90506000198114612b175781811015612b0a5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610ba4565b612b17848484840361297e565b50505050565b6001600160a01b038316612b815760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610ba4565b6001600160a01b038216612be35760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610ba4565b612bee838383613d99565b6001600160a01b03831660009081526020819052604090205481811015612c665760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610ba4565b6001600160a01b03808516600090815260208190526040808220858503905591851681529081208054849290612c9d908490614f55565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051612ce991815260200190565b60405180910390a3612b17565b815160009015612d15578251612d0e90600190614fd1565b9050610a52565b50919050565b6001600160a01b038216612d7b5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610ba4565b612d8782600083613d99565b6001600160a01b03821660009081526020819052604090205481811015612dfb5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610ba4565b6001600160a01b0383166000908152602081905260408120838303905560028054849290612e2a908490614fd1565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001612a96565b505050565b60006001600160a01b038316612e9357506001600160a01b03811631610a52565b6040516370a0823160e01b81526001600160a01b0383811660048301528416906370a082319060240160206040518083038186803b158015612ed457600080fd5b505afa158015612ee8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d0e9190614c38565b6000610a778284614fb2565b6000610a778284614f92565b8015612e6d576001600160a01b038316612f6e576040516001600160a01b0383169082156108fc029083906000818181858888f19350505050158015612b17573d6000803e3d6000fd5b612e6d6001600160a01b0384168383614089565b6000610a778284614f55565b6123e885612fe683610c8f612fa4826001613483565b604080518082019091528b546001600160d81b0381168252600160d81b900464ffffffffff166020820152611b33908990612fe0908d8d613089565b90612f0c565b6140ec565b60408051602081019091526000815260405180602001604052808360016130129190614f55565b905292915050565b6040805184815283151560208201529081018290526001600160a01b038516907fc00d9debcc1737a88e76a969557b14246f013c43c1328eab2cbac00c1714d0ca906060015b60405180910390a250505050565b61307f88888888888989898961412a565b5050505050505050565b6000806130ae84611a55876020015164ffffffffff164261348390919063ffffffff16565b905060006130bc8583613483565b90506123ff85610c8f6130cf8786612f0c565b8951611b33906001600160d81b031686612f0c565b6000818310156130f45781610a77565b5090919050565b6040805184815283151560208201529081018290526001600160a01b038516907f4ad9a834867d5460d12562e53fb43cfa76081110dbc58da81b8aeded6813639f90606001613060565b60008061316e62015180611a55856040015165ffffffffffff164261348390919063ffffffff16565b9050600061317f6201518083613483565b90506120ee62015180610c8f6131ab8588602001516001600160681b0316612f0c90919063ffffffff16565b8751611b33906001600160681b031686612f0c565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60008183106130f45781610a77565b6001600160a01b0382166132775760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610ba4565b61328360008383613d99565b80600260008282546132959190614f55565b90915550506001600160a01b038216600090815260208190526040812080548392906132c2908490614f55565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b8015612b17576001600160a01b03841661346e57803410156133705760405162461bcd60e51b815260206004820152601c60248201527f455243323048656c7065725f56414c55455f4e4f545f454e4f554748000000006044820152606401610ba4565b6001600160a01b03831633146133c85760405162461bcd60e51b815260206004820152601b60248201527f455243323048656c7065725f46524f4d5f4e4f545f53454e44455200000000006044820152606401610ba4565b6001600160a01b03821630146134205760405162461bcd60e51b815260206004820152601760248201527f455243323048656c7065725f544f5f4e4f545f544849530000000000000000006044820152606401610ba4565b80341115613469576001600160a01b0383166108fc61343f3484613483565b6040518115909202916000818181858888f19350505050158015613467573d6000803e3d6000fd5b505b612b17565b612b176001600160a01b038516848484614369565b6000610a778284614fd1565b6000866001600160a01b0316886001600160a01b031611156134af579596955b6000861180156134f057507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316886001600160a01b0316145b801561352d57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316876001600160a01b0316145b156135c957600061355461354d670de0b6b3a7640000610c8f8a88612f0c565b8890613483565b905060006135628783612f82565b9050600061357482610c8f858a612f0c565b905060006135976135858786612f0c565b6119ab670de0b6b3a764000086612f0c565b905060006135ad670de0b6b3a764000085612f0c565b90506135bd81610c8f8585612f0c565b955050505050506135cd565b5060005b979650505050505050565b6040805184815283151560208201529081018290526001600160a01b038516907fdb1350180a01d00beab06bdea8ddb5c0cacdce847a28cfaaeabf9075c26d5aa090606001613060565b600080613642604051806040016040528060008152602001600081525090565b600061364c6111d6565b86516001600160a01b038d166000908152601560209081526040918290208251808401909352546001600160d81b0381168352600160d81b900464ffffffffff16908201529192506136a091908390613089565b80835286516136af91906130e4565b82526020868101516001600160a01b038c166000908152601683526040908190208151808301909252546001600160d81b0381168252600160d81b900464ffffffffff169281019290925261370691908390613089565b602080840182905287015161371b9190613212565b60208301526137356001600160a01b038c1633308c61330c565b855161374e906119ab6001600160a01b038e1630612e72565b935061376f8b8b86856000015186602001518a600001518b6020015161348f565b92506000831180156137815750878310155b6137c65760405162461bcd60e51b81526020600482015260166024820152750a6ae82a0bea48aa6aa98a8be9c9ea8be8a9c9eaa8e960531b6044820152606401610ba4565b6137da6001600160a01b038b168885612f24565b8551825114613811578151613811906137f39086612f82565b6001600160a01b038d166000908152601560205260409020906140ec565b8560200151826020015114613851576020820151613851906138339085613483565b6001600160a01b038c166000908152601660205260409020906140ec565b85516001600160a01b038c1660009081526016602052604090206138769183906143a1565b6020808701516001600160a01b038c166000908152601590925260409091206138a09183906143a1565b509750975097945050505050565b600080600080600760009054906101000a90046001600160a01b03166001600160a01b03166323a65ab66040518163ffffffff1660e01b815260040160806040518083038186803b15801561390257600080fd5b505afa158015613916573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061393a9190614ce3565b935093509350935060008060006ec097ce7bc90715b34b9f100000000090506139828960000151610c8f61397b8f8d60000151612f8290919063ffffffff16565b8490612f0c565b60208a015190915061399b90610c8f61397b828f613483565b90506ec097ce7bc90715b34b9f1000000000811115613d2d576139bd816143dd565b905060006139e282610c8f6139da82670de0b6b3a7640000613483565b600254612fe0565b90506001600160a01b038b166139f9576000613a0f565b613a0f670de0b6b3a7640000610c8f838b612f0c565b93506001600160a01b038616613a26576000613a3c565b613a3c670de0b6b3a7640000610c8f838a612f0c565b92506001600160a01b038516613a71578315613a5c57613a5c8b85613221565b8215613a6c57613a6c8684613221565b613d2b565b6000841180613a805750600083115b15613d2b576000808411613a95576000613a98565b60015b60008611613aa7576000613aaa565b60015b613ab49190614f6d565b60ff16905060008167ffffffffffffffff811115613ae257634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015613b0b578160200160208202803683370190505b50905060008267ffffffffffffffff811115613b3757634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015613b60578160200160208202803683370190505b5090508d82600081518110613b8557634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b0316815250508681600081518110613bc757634e487b7160e01b600052603260045260246000fd5b60209081029190910101528515613c53578882613be5600186614fd1565b81518110613c0357634e487b7160e01b600052603260045260246000fd5b6001600160a01b03909216602092830291909101909101528581613c28600186614fd1565b81518110613c4657634e487b7160e01b600052603260045260246000fd5b6020026020010181815250505b60405163024c5d4f60e21b81526001600160a01b03891690630931753c90613c819085908590600401614d99565b600060405180830381600087803b158015613c9b57600080fd5b505af1925050508015613cac575060015b613d14577f08c379a0afcc32b1a39302f7cb8073359698411ab5fd6e3edb2c02c0b5fba8aa604051613d0790602080825260159082015274155c19185d194814995dd85c991cc811985a5b1959605a1b604082015260600190565b60405180910390a1613d27565b613d2788613d228989612f82565b613221565b5050505b505b88516020808b01518a518b83015160408051958652938501929092528383015260608301526080820185905260a08201849052517f2a368c7f33bb86e2d999940a3989d849031aff29b750f67947e6b8e8c3d2ffd69181900360c00190a1505050505050505050505050565b816001600160a01b0316836001600160a01b03161415613db857505050565b6007546001600160a01b039081169060009085161580613e4c5750604051633b90b9bf60e01b81526001600160a01b038681166004830152831690633b90b9bf9060240160206040518083038186803b158015613e1457600080fd5b505afa158015613e28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e4c9190614b1f565b15905060006001600160a01b0385161580613edb5750604051633b90b9bf60e01b81526001600160a01b038681166004830152841690633b90b9bf9060240160206040518083038186803b158015613ea357600080fd5b505afa158015613eb7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613edb9190614b1f565b15905081158015613eea575080155b15613ef757505050505050565b60006001600160a01b038716613f0e576000613f17565b613f1787611187565b905060006001600160a01b038716613f30576000613f39565b613f3987611187565b90506000613f7b6001600160a01b03891615613f56576000613f58565b875b6119ab6001600160a01b038c1615613f71576000613f73565b895b600254611b33565b905060006040518061010001604052808b6001600160a01b031681526020018a6001600160a01b03168152602001871515815260200186151581526020018981526020018581526020018481526020018381525090506000806000896001600160a01b031663edb7a6fa6040518163ffffffff1660e01b815260040160606040518083038186803b15801561400f57600080fd5b505afa158015614023573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140479190614d2d565b92509250925061405c848461301a6008614454565b61406b84836130fb600c614454565b61407a84826135d86010614454565b50505050505050505050505050565b6040516001600160a01b038316602482015260448101829052612e6d90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526145a1565b6140f581614673565b6140fe426146c8565b6001600160d81b039190911664ffffffffff909116600160d81b026001600160d81b0319161790915550565b600189015460028a01548190806141408b511590565b156141565761414f818a613483565b9050614177565b61417461416d6141668d89612cf6565b8b90612f0c565b8490613483565b92505b895161418e576141878189612f82565b90506141af565b6141ac6141a561419e8c89612cf6565b8a90612f0c565b8490612f82565b92505b8383146141be5760018d018390555b8181146141cd5760028d018190555b600087156141f2576141ed88610c8f6141e6858b612f0c565b8790612f82565b6141f4565b865b905060008e6000016040518060600160405290816000820160009054906101000a90046001600160681b03166001600160681b03166001600160681b0316815260200160008201600d9054906101000a90046001600160681b03166001600160681b03166001600160681b0316815260200160008201601a9054906101000a900465ffffffffffff1665ffffffffffff1665ffffffffffff1681525050905080602001516001600160681b03168214614324578e6142b96142b483613145565b612925565b6142c284612925565b6142cb4261471f565b83546001600160681b039384166cffffffffffffffffffffffffff19938516600160681b026cffffffffffffffffffffffffff60681b1965ffffffffffff909416600160d01b0293909316949091169390931717161790555b50508a518a511461434e576001600160a01b038c16600090815260038e01602052604090208a5190555b61407a8c61435c8c89612cf6565b8c51158b8963ffffffff16565b6040516001600160a01b0380851660248301528316604482015260648101829052612b179085906323b872dd60e01b906084016140b5565b6040805180820190915283546001600160d81b0381168252600160d81b900464ffffffffff166020820152612e6d908490612fe6908585613089565b6000600382111561443e578160006143f6600283614f92565b614401906001614f55565b90505b818110156144375790508060028161441c8187614f92565b6144269190614f55565b6144309190614f92565b9050614404565b5092915050565b811561444c57506001919050565b506000919050565b83516001600160a01b03908116600090815260038301602081815260408084208151808401835290548152828a0151909516845291815291819020815192830190915254815281511580156144a857508051155b80156144b5575085604001515b80156144c2575085606001515b156145345785516144fd906144d78488612cf6565b60016144f48a608001518b60a0015161348390919063ffffffff16565b8863ffffffff16565b602086015161452d906145108388612cf6565b60016144f48a608001518b60c00151612f8290919063ffffffff16565b5050612b17565b85604001511561456e57855160a0870151608088015161456e9291859161455c908290613483565b60e08b01518894939291908b8b614777565b85606001511561459957602086015160c087015160808801516145999291849161455c908290612f82565b505050505050565b60006145f6826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166147af9092919063ffffffff16565b805190915015612e6d57808060200190518101906146149190614b1f565b612e6d5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610ba4565b6000600160d81b821061297a5760405162461bcd60e51b815260206004820152601e60248201527f76616c756520646f6573206e6f742066697420696e20323136206269747300006044820152606401610ba4565b600065010000000000821061297a5760405162461bcd60e51b815260206004820152601d60248201527f76616c756520646f6573206e6f742066697420696e20343020626974730000006044820152606401610ba4565b60006601000000000000821061297a5760405162461bcd60e51b815260206004820152601d60248201527f76616c756520646f6573206e6f742066697420696e20343820626974730000006044820152606401610ba4565b61307f888888871561478957896147a5565b6040805160208082018352600091829052825190810190925281525b898989898961412a565b60606120ee8484600085856001600160a01b0385163b6148115760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610ba4565b600080866001600160a01b0316858760405161482d9190614d7d565b60006040518083038185875af1925050503d806000811461486a576040519150601f19603f3d011682016040523d82523d6000602084013e61486f565b606091505b50915091506135cd82828660608315614889575081610a77565b8251156148995782518084602001fd5b8160405162461bcd60e51b8152600401610ba49190614e77565b60405180604001604052806002906020820280368337509192915050565b600082601f8301126148e1578081fd5b6040516040810181811067ffffffffffffffff821117156149045761490461507a565b806040525080838560408601111561491a578384fd5b835b600281101561493b57813583526020928301929091019060010161491c565b509195945050505050565b600082601f830112614956578081fd5b8135602067ffffffffffffffff808311156149735761497361507a565b8260051b604051601f19603f830116810181811084821117156149985761499861507a565b604052848152838101925086840182880185018910156149b6578687fd5b8692505b858310156149d85780358452928401926001929092019184016149ba565b50979650505050505050565b6000602082840312156149f5578081fd5b8135610a7781615090565b60008060408385031215614a12578081fd5b8235614a1d81615090565b91506020830135614a2d81615090565b809150509250929050565b600080600060608486031215614a4c578081fd5b8335614a5781615090565b92506020840135614a6781615090565b929592945050506040919091013590565b60008060408385031215614a8a578182fd5b8235614a9581615090565b946020939093013593505050565b60008060808385031215614ab5578182fd5b614abf84846148d1565b9150614ace84604085016148d1565b90509250929050565b600080600060a08486031215614aeb578283fd5b614af585856148d1565b9250614b0485604086016148d1565b91506080840135614b1481615090565b809150509250925092565b600060208284031215614b30578081fd5b81518015158114610a77578182fd5b600080600060608486031215614a4c578283fd5b600080600080600060a08688031215614b6a578081fd5b8535614b7581615090565b94506020860135614b8581615090565b935060408601359250606086013591506080860135614ba381615090565b809150509295509295909350565b60008060008060008060c08789031215614bc9578384fd5b8635614bd481615090565b95506020870135614be481615090565b945060408701359350606087013592506080870135614c0281615090565b915060a0870135614c1281615090565b809150509295509295509295565b600060208284031215614c31578081fd5b5035919050565b600060208284031215614c49578081fd5b5051919050565b60008060408385031215614c62578182fd5b82359150602083013567ffffffffffffffff811115614c7f578182fd5b614c8b85828601614946565b9150509250929050565b600080600060608486031215614ca9578081fd5b83359250602084013567ffffffffffffffff811115614cc6578182fd5b614cd286828701614946565b9250506040840135614b1481615090565b60008060008060808587031215614cf8578182fd5b84519350602085015192506040850151614d1181615090565b6060860151909250614d2281615090565b939692955090935050565b600080600060608486031215614d41578081fd5b8351925060208401519150604084015190509250925092565b8060005b6002811015612b17578151845260209384019390910190600101614d5e565b60008251614d8f818460208701614fe8565b9190910192915050565b604080825283519082018190526000906020906060840190828701845b82811015614ddb5781516001600160a01b031684529284019290840190600101614db6565b50505083810382850152845180825285830191830190845b81811015614e0f57835183529284019291840191600101614df3565b5090979650505050505050565b6020808252825182820181905260009190848201906040850190845b81811015614e5d5783516001600160a01b031683529284019291840191600101614e38565b50909695505050505050565b60408101610a528284614d5a565b6020815260008251806020840152614e96816040850160208701614fe8565b601f01601f19169190910160400192915050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b82815260608101610a776020830184614d5a565b60006001600160801b03808316818516808303821115614f4c57614f4c615064565b01949350505050565b60008219821115614f6857614f68615064565b500190565b600060ff821660ff84168060ff03821115614f8a57614f8a615064565b019392505050565b600082614fad57634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615614fcc57614fcc615064565b500290565b600082821015614fe357614fe3615064565b500390565b60005b83811015615003578181015183820152602001614feb565b83811115612b175750506000910152565b600181811c9082168061502857607f821691505b60208210811415612d1557634e487b7160e01b600052602260045260246000fd5b600060001982141561505d5761505d615064565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610f4757600080fdfea26469706673582212209fee560d09fe611caadfc501723115e2a457326498f152e977b7bac3081a323164736f6c63430008040033a264697066735822122047cc9bf896190d33718e6cee088c1cf6136a9dcc97c7676f8ed5875a04e12d7e64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "Helper contract to deploy pools ",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}